[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.9.2","content-config-digest","9a95ec2e8398aaca","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://smartboot.tech/\",\"compressHTML\":true,\"base\":\"/feat/\",\"trailingSlash\":\"always\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image/\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[null,[null,{\"experimentalHeadingIdCompat\":false}],null,null,null,null,[null,{\"themes\":[{\"name\":\"Night Owl No Italics\",\"type\":\"dark\",\"colors\":{\"focusBorder\":\"#122d42\",\"foreground\":\"#d6deeb\",\"disabledForeground\":\"#cccccc80\",\"descriptionForeground\":\"#d6deebb3\",\"errorForeground\":\"#ef5350\",\"icon.foreground\":\"#c5c5c5\",\"contrastActiveBorder\":null,\"contrastBorder\":\"#122d42\",\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#4f4f4f\",\"textLink.activeForeground\":\"#3794ff\",\"textLink.foreground\":\"#3794ff\",\"textPreformat.foreground\":\"#d7ba7d\",\"textSeparator.foreground\":\"#ffffff2e\",\"editor.background\":\"#23262f\",\"editor.foreground\":\"#d6deeb\",\"editorLineNumber.foreground\":\"#4b6479\",\"editorLineNumber.activeForeground\":\"#c5e4fd\",\"editorActiveLineNumber.foreground\":\"#c6c6c6\",\"editor.selectionBackground\":\"#1d3b53\",\"editor.inactiveSelectionBackground\":\"#7e57c25a\",\"editor.selectionHighlightBackground\":\"#5f7e9779\",\"editorError.foreground\":\"#ef5350\",\"editorWarning.foreground\":\"#b39554\",\"editorInfo.foreground\":\"#3794ff\",\"editorHint.foreground\":\"#eeeeeeb2\",\"problemsErrorIcon.foreground\":\"#ef5350\",\"problemsWarningIcon.foreground\":\"#b39554\",\"problemsInfoIcon.foreground\":\"#3794ff\",\"editor.findMatchBackground\":\"#5f7e9779\",\"editor.findMatchHighlightBackground\":\"#1085bb5d\",\"editor.findRangeHighlightBackground\":\"#3a3d4166\",\"editorLink.activeForeground\":\"#4e94ce\",\"editorLightBulb.foreground\":\"#ffcc00\",\"editorLightBulbAutoFix.foreground\":\"#75beff\",\"diffEditor.insertedTextBackground\":\"#99b76d23\",\"diffEditor.insertedTextBorder\":\"#c5e47833\",\"diffEditor.removedTextBackground\":\"#ef535033\",\"diffEditor.removedTextBorder\":\"#ef53504d\",\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#011627\",\"editorStickyScrollHover.background\":\"#2a2d2e\",\"editorInlayHint.background\":\"#5f7e97cc\",\"editorInlayHint.foreground\":\"#ffffff\",\"editorInlayHint.typeBackground\":\"#5f7e97cc\",\"editorInlayHint.typeForeground\":\"#ffffff\",\"editorInlayHint.parameterBackground\":\"#5f7e97cc\",\"editorInlayHint.parameterForeground\":\"#ffffff\",\"editorPane.background\":\"#011627\",\"editorGroup.emptyBackground\":\"#011627\",\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-black)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#011627\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#011627\",\"editorGroup.dropBackground\":\"#7e57c273\",\"editorGroup.dropIntoPromptForeground\":\"#d6deeb\",\"editorGroup.dropIntoPromptBackground\":\"#021320\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#011627\",\"sideBySideEditor.verticalBorder\":\"#011627\",\"scrollbar.shadow\":\"#010b14\",\"scrollbarSlider.background\":\"#ffffff17\",\"scrollbarSlider.hoverBackground\":\"#ffffff40\",\"scrollbarSlider.activeBackground\":\"#084d8180\",\"panel.background\":\"#011627\",\"panel.border\":\"#5f7e97\",\"panelTitle.activeBorder\":\"#5f7e97\",\"panelTitle.activeForeground\":\"#ffffffcc\",\"panelTitle.inactiveForeground\":\"#d6deeb80\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#011627\",\"widget.shadow\":\"#011627\",\"editorWidget.background\":\"#021320\",\"editorWidget.foreground\":\"#d6deeb\",\"editorWidget.border\":\"#5f7e97\",\"quickInput.background\":\"#021320\",\"quickInput.foreground\":\"#d6deeb\",\"quickInputTitle.background\":\"#ffffff1a\",\"pickerGroup.foreground\":\"#d1aaff\",\"pickerGroup.border\":\"#011627\",\"editor.hoverHighlightBackground\":\"#7e57c25a\",\"editorHoverWidget.background\":\"#011627\",\"editorHoverWidget.foreground\":\"#d6deeb\",\"editorHoverWidget.border\":\"#5f7e97\",\"editorHoverWidget.statusBarBackground\":\"#011a2f\",\"titleBar.activeBackground\":\"var(--sl-color-black)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#010e1a\",\"titleBar.inactiveForeground\":\"#eeefff99\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#5a5d5e50\",\"toolbar.activeBackground\":\"#63666750\",\"tab.activeBackground\":\"#0b2942\",\"tab.unfocusedActiveBackground\":\"#0b2942\",\"tab.inactiveBackground\":\"#01111d\",\"tab.unfocusedInactiveBackground\":\"#01111d\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#5f7e97\",\"tab.unfocusedActiveForeground\":\"#5f7e97\",\"tab.unfocusedInactiveForeground\":\"#5f7e97\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#272b3b\",\"tab.lastPinnedBorder\":\"#585858\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":\"#262a39\",\"tab.activeBorderTop\":\"var(--sl-color-accent-high)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#3399cc\",\"tab.inactiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedActiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedInactiveModifiedBorder\":\"#3399cc40\",\"badge.background\":\"#5f7e97\",\"badge.foreground\":\"#ffffff\",\"button.background\":\"#7e57c2cc\",\"button.foreground\":\"#ffffffcc\",\"button.border\":\"#122d42\",\"button.separator\":\"#ffffff52\",\"button.hoverBackground\":\"#7e57c2\",\"button.secondaryBackground\":\"#3a3d41\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#46494e\",\"dropdown.background\":\"#011627\",\"dropdown.foreground\":\"#ffffffcc\",\"dropdown.border\":\"#5f7e97\",\"list.activeSelectionBackground\":\"#234d708c\",\"list.activeSelectionForeground\":\"#ffffff\",\"tree.indentGuidesStroke\":\"#585858\",\"input.background\":\"#0b253a\",\"input.foreground\":\"#ffffffcc\",\"input.placeholderForeground\":\"#5f7e97\",\"inputOption.activeBorder\":\"#ffffffcc\",\"inputOption.hoverBackground\":\"#5a5d5e80\",\"inputOption.activeBackground\":\"#122d4266\",\"inputOption.activeForeground\":\"#ffffff\",\"inputValidation.infoBackground\":\"#00589ef2\",\"inputValidation.infoBorder\":\"#64b5f6\",\"inputValidation.warningBackground\":\"#675700f2\",\"inputValidation.warningBorder\":\"#ffca28\",\"inputValidation.errorBackground\":\"#ab0300f2\",\"inputValidation.errorBorder\":\"#ef5350\",\"keybindingLabel.background\":\"#8080802b\",\"keybindingLabel.foreground\":\"#cccccc\",\"keybindingLabel.border\":\"#33333399\",\"keybindingLabel.bottomBorder\":\"#44444499\",\"menu.foreground\":\"#ffffffcc\",\"menu.background\":\"#011627\",\"menu.selectionForeground\":\"#ffffff\",\"menu.selectionBackground\":\"#234d708c\",\"menu.separatorBackground\":\"#606060\",\"editor.snippetTabstopHighlightBackground\":\"#7c7c74c\",\"editor.snippetFinalTabstopHighlightBorder\":\"#525252\",\"terminal.ansiBlack\":\"#011627\",\"terminal.ansiRed\":\"#ef5350\",\"terminal.ansiGreen\":\"#22da6e\",\"terminal.ansiYellow\":\"#c5e478\",\"terminal.ansiBlue\":\"#82aaff\",\"terminal.ansiMagenta\":\"#c792ea\",\"terminal.ansiCyan\":\"#21c7a8\",\"terminal.ansiWhite\":\"#ffffff\",\"terminal.ansiBrightBlack\":\"#575656\",\"terminal.ansiBrightRed\":\"#ef5350\",\"terminal.ansiBrightGreen\":\"#22da6e\",\"terminal.ansiBrightYellow\":\"#ffeb95\",\"terminal.ansiBrightBlue\":\"#82aaff\",\"terminal.ansiBrightMagenta\":\"#c792ea\",\"terminal.ansiBrightCyan\":\"#7fdbca\",\"terminal.ansiBrightWhite\":\"#ffffff\",\"selection.background\":\"#4373c2\",\"input.border\":\"#5f7e97\",\"punctuation.definition.generic.begin.html\":\"#ef5350f2\",\"progress.background\":\"#7e57c2\",\"breadcrumb.foreground\":\"#a599e9\",\"breadcrumb.focusForeground\":\"#ffffff\",\"breadcrumb.activeSelectionForeground\":\"#ffffff\",\"breadcrumbPicker.background\":\"#001122\",\"list.invalidItemForeground\":\"#975f94\",\"list.dropBackground\":\"#011627\",\"list.focusBackground\":\"#010d18\",\"list.focusForeground\":\"#ffffff\",\"list.highlightForeground\":\"#ffffff\",\"list.hoverBackground\":\"#011627\",\"list.hoverForeground\":\"#ffffff\",\"list.inactiveSelectionBackground\":\"#0e293f\",\"list.inactiveSelectionForeground\":\"#5f7e97\",\"activityBar.background\":\"#011627\",\"activityBar.dropBackground\":\"#5f7e97\",\"activityBar.foreground\":\"#5f7e97\",\"activityBar.border\":\"#011627\",\"activityBarBadge.background\":\"#44596b\",\"activityBarBadge.foreground\":\"#ffffff\",\"sideBar.background\":\"#011627\",\"sideBar.foreground\":\"#89a4bb\",\"sideBar.border\":\"#011627\",\"sideBarTitle.foreground\":\"#5f7e97\",\"sideBarSectionHeader.background\":\"#011627\",\"sideBarSectionHeader.foreground\":\"#5f7e97\",\"editorCursor.foreground\":\"#80a4c2\",\"editor.wordHighlightBackground\":\"#f6bbe533\",\"editor.wordHighlightStrongBackground\":\"#e2a2f433\",\"editor.lineHighlightBackground\":\"#0003\",\"editor.rangeHighlightBackground\":\"#7e57c25a\",\"editorIndentGuide.background\":\"#5e81ce52\",\"editorIndentGuide.activeBackground\":\"#7e97ac\",\"editorRuler.foreground\":\"#5e81ce52\",\"editorCodeLens.foreground\":\"#5e82ceb4\",\"editorBracketMatch.background\":\"#5f7e974d\",\"editorOverviewRuler.currentContentForeground\":\"#7e57c2\",\"editorOverviewRuler.incomingContentForeground\":\"#7e57c2\",\"editorOverviewRuler.commonContentForeground\":\"#7e57c2\",\"editorGutter.background\":\"#011627\",\"editorGutter.modifiedBackground\":\"#e2b93d\",\"editorGutter.addedBackground\":\"#9ccc65\",\"editorGutter.deletedBackground\":\"#ef5350\",\"editorSuggestWidget.background\":\"#2c3043\",\"editorSuggestWidget.border\":\"#2b2f40\",\"editorSuggestWidget.foreground\":\"#d6deeb\",\"editorSuggestWidget.highlightForeground\":\"#ffffff\",\"editorSuggestWidget.selectedBackground\":\"#5f7e97\",\"debugExceptionWidget.background\":\"#011627\",\"debugExceptionWidget.border\":\"#5f7e97\",\"editorMarkerNavigation.background\":\"#0b2942\",\"editorMarkerNavigationError.background\":\"#ef5350\",\"editorMarkerNavigationWarning.background\":\"#ffca28\",\"peekView.border\":\"#5f7e97\",\"peekViewEditor.background\":\"#011627\",\"peekViewEditor.matchHighlightBackground\":\"#7e57c25a\",\"peekViewResult.background\":\"#011627\",\"peekViewResult.fileForeground\":\"#5f7e97\",\"peekViewResult.lineForeground\":\"#5f7e97\",\"peekViewResult.matchHighlightBackground\":\"#ffffffcc\",\"peekViewResult.selectionBackground\":\"#2e3250\",\"peekViewResult.selectionForeground\":\"#5f7e97\",\"peekViewTitle.background\":\"#011627\",\"peekViewTitleDescription.foreground\":\"#697098\",\"peekViewTitleLabel.foreground\":\"#5f7e97\",\"merge.currentHeaderBackground\":\"#5f7e97\",\"merge.incomingHeaderBackground\":\"#7e57c25a\",\"statusBar.background\":\"#011627\",\"statusBar.foreground\":\"#5f7e97\",\"statusBar.border\":\"#262a39\",\"statusBar.debuggingBackground\":\"#202431\",\"statusBar.debuggingBorder\":\"#1f2330\",\"statusBar.noFolderBackground\":\"#011627\",\"statusBar.noFolderBorder\":\"#25293a\",\"statusBarItem.activeBackground\":\"#202431\",\"statusBarItem.hoverBackground\":\"#202431\",\"statusBarItem.prominentBackground\":\"#202431\",\"statusBarItem.prominentHoverBackground\":\"#202431\",\"notifications.background\":\"#01111d\",\"notifications.border\":\"#262a39\",\"notificationCenter.border\":\"#262a39\",\"notificationToast.border\":\"#262a39\",\"notifications.foreground\":\"#ffffffcc\",\"notificationLink.foreground\":\"#80cbc4\",\"extensionButton.prominentForeground\":\"#ffffffcc\",\"extensionButton.prominentBackground\":\"#7e57c2cc\",\"extensionButton.prominentHoverBackground\":\"#7e57c2\",\"terminal.selectionBackground\":\"#1b90dd4d\",\"terminalCursor.background\":\"#234d70\",\"debugToolBar.background\":\"#011627\",\"welcomePage.buttonBackground\":\"#011627\",\"welcomePage.buttonHoverBackground\":\"#011627\",\"walkThrough.embeddedEditorBackground\":\"#011627\",\"gitDecoration.modifiedResourceForeground\":\"#a2bffc\",\"gitDecoration.deletedResourceForeground\":\"#ef535090\",\"gitDecoration.untrackedResourceForeground\":\"#c5e478ff\",\"gitDecoration.ignoredResourceForeground\":\"#395a75\",\"gitDecoration.conflictingResourceForeground\":\"#ffeb95cc\",\"source.elm\":\"#5f7e97\",\"string.quoted.single.js\":\"#ffffff\",\"meta.objectliteral.js\":\"#82aaff\"},\"fg\":\"#d6deeb\",\"bg\":\"#23262f\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#a2bffc\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#f27775fe\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#d6deeb\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#919f9f\",\"fontStyle\":\"\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#5ca7e4\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#caece6\",\"fontStyle\":\"\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"fontStyle\":\"\",\"foreground\":\"#c5e478\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"background\":\"#ff2c83\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#d3423e\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#919f9f\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#cdebf7\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#ffffff\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#80cbc4\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#57eaf1\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#fad430\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#faf39f\",\"fontStyle\":\"\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#82aaff\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#989da0\",\"background\":\"#F78C6C\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"background\":\"#8BD649\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#ec5f67\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#ef787f\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#31e1eb\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Unquoted String Zone\",\"scope\":[\"string.unquoted.preprocessor.message.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Region\",\"scope\":[\"punctuation.separator.hash.cs\",\"keyword.preprocessor.region.cs\",\"keyword.preprocessor.endregion.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"bold\"}},{\"name\":\"C# Other Variables\",\"scope\":[\"variable.other.object.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Enum\",\"scope\":[\"entity.name.type.enum.cs\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Dart String\",\"scope\":[\"string.interpolated.single.dart\",\"string.interpolated.double.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Dart Class\",\"scope\":[\"support.class.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#ff6d6d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#dddddd\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#e0dec6\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#6ae9f0\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#78ccf0\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#8b96ea\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#c789d6\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#ff869a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#d6deeb\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#8eace3\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#d7dbe0\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-6)\",\"terminalBackground\":\"var(--sl-color-gray-6)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-6)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#ffffff17\",\"markBorderColor\":\"#ffffff40\"}}},{\"name\":\"Night Owl Light\",\"type\":\"light\",\"colors\":{\"focusBorder\":\"#93a1a1\",\"foreground\":\"#403f53\",\"disabledForeground\":\"#61616180\",\"descriptionForeground\":\"#403f53\",\"errorForeground\":\"#403f53\",\"icon.foreground\":\"#424242\",\"contrastActiveBorder\":null,\"contrastBorder\":null,\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#dcdcdc66\",\"textLink.activeForeground\":\"#006ab1\",\"textLink.foreground\":\"#006ab1\",\"textPreformat.foreground\":\"#a31515\",\"textSeparator.foreground\":\"#0000002e\",\"editor.background\":\"#f6f7f9\",\"editor.foreground\":\"#403f53\",\"editorLineNumber.foreground\":\"#90a7b2\",\"editorLineNumber.activeForeground\":\"#403f53\",\"editorActiveLineNumber.foreground\":\"#0b216f\",\"editor.selectionBackground\":\"#e0e0e0\",\"editor.inactiveSelectionBackground\":\"#e0e0e080\",\"editor.selectionHighlightBackground\":\"#339cec33\",\"editorError.foreground\":\"#e64d49\",\"editorWarning.foreground\":\"#daaa01\",\"editorInfo.foreground\":\"#1a85ff\",\"editorHint.foreground\":\"#6c6c6c\",\"problemsErrorIcon.foreground\":\"#e64d49\",\"problemsWarningIcon.foreground\":\"#daaa01\",\"problemsInfoIcon.foreground\":\"#1a85ff\",\"editor.findMatchBackground\":\"#93a1a16c\",\"editor.findMatchHighlightBackground\":\"#93a1a16c\",\"editor.findRangeHighlightBackground\":\"#7497a633\",\"editorLink.activeForeground\":\"#0000ff\",\"editorLightBulb.foreground\":\"#ddb100\",\"editorLightBulbAutoFix.foreground\":\"#007acc\",\"diffEditor.insertedTextBackground\":\"#9ccc2c40\",\"diffEditor.insertedTextBorder\":null,\"diffEditor.removedTextBackground\":\"#ff000033\",\"diffEditor.removedTextBorder\":null,\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#fbfbfb\",\"editorStickyScrollHover.background\":\"#f0f0f0\",\"editorInlayHint.background\":\"#2aa29899\",\"editorInlayHint.foreground\":\"#f0f0f0\",\"editorInlayHint.typeBackground\":\"#2aa29899\",\"editorInlayHint.typeForeground\":\"#f0f0f0\",\"editorInlayHint.parameterBackground\":\"#2aa29899\",\"editorInlayHint.parameterForeground\":\"#f0f0f0\",\"editorPane.background\":\"#fbfbfb\",\"editorGroup.emptyBackground\":null,\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-gray-6)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#f0f0f0\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#f0f0f0\",\"editorGroup.dropBackground\":\"#2677cb2d\",\"editorGroup.dropIntoPromptForeground\":\"#403f53\",\"editorGroup.dropIntoPromptBackground\":\"#f0f0f0\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#f0f0f0\",\"sideBySideEditor.verticalBorder\":\"#f0f0f0\",\"scrollbar.shadow\":\"#cccccc\",\"scrollbarSlider.background\":\"#0000001a\",\"scrollbarSlider.hoverBackground\":\"#00000055\",\"scrollbarSlider.activeBackground\":\"#00000099\",\"panel.background\":\"#f0f0f0\",\"panel.border\":\"#d9d9d9\",\"panelTitle.activeBorder\":\"#424242\",\"panelTitle.activeForeground\":\"#424242\",\"panelTitle.inactiveForeground\":\"#424242bf\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#f6f6f6\",\"widget.shadow\":\"#d9d9d9\",\"editorWidget.background\":\"#f0f0f0\",\"editorWidget.foreground\":\"#403f53\",\"editorWidget.border\":\"#d9d9d9\",\"quickInput.background\":\"#f0f0f0\",\"quickInput.foreground\":\"#403f53\",\"quickInputTitle.background\":\"#0000000f\",\"pickerGroup.foreground\":\"#403f53\",\"pickerGroup.border\":\"#d9d9d9\",\"editor.hoverHighlightBackground\":\"#339cec33\",\"editorHoverWidget.background\":\"#f0f0f0\",\"editorHoverWidget.foreground\":\"#403f53\",\"editorHoverWidget.border\":\"#d9d9d9\",\"editorHoverWidget.statusBarBackground\":\"#e4e4e4\",\"titleBar.activeBackground\":\"var(--sl-color-gray-6)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#f0f0f099\",\"titleBar.inactiveForeground\":\"#33333399\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#b8b8b850\",\"toolbar.activeBackground\":\"#a6a6a650\",\"tab.activeBackground\":\"#f6f6f6\",\"tab.unfocusedActiveBackground\":\"#f6f6f6\",\"tab.inactiveBackground\":\"#f0f0f0\",\"tab.unfocusedInactiveBackground\":\"#f0f0f0\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#403f53\",\"tab.unfocusedActiveForeground\":\"#403f53b3\",\"tab.unfocusedInactiveForeground\":\"#403f5380\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#f0f0f0\",\"tab.lastPinnedBorder\":\"#a9a9a9\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":null,\"tab.activeBorderTop\":\"var(--sl-color-accent)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#2aa298\",\"tab.inactiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedActiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedInactiveModifiedBorder\":\"#93a1a1\",\"badge.background\":\"#2aa298\",\"badge.foreground\":\"#f0f0f0\",\"button.background\":\"#2aa298\",\"button.foreground\":\"#f0f0f0\",\"button.border\":null,\"button.separator\":\"#f0f0f066\",\"button.hoverBackground\":\"#22827a\",\"button.secondaryBackground\":\"#5f6a79\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#4c5561\",\"dropdown.background\":\"#f0f0f0\",\"dropdown.foreground\":\"#403f53\",\"dropdown.border\":\"#d9d9d9\",\"list.activeSelectionBackground\":\"#d3e8f8\",\"list.activeSelectionForeground\":\"#403f53\",\"tree.indentGuidesStroke\":\"#a9a9a9\",\"input.background\":\"#f0f0f0\",\"input.foreground\":\"#403f53\",\"input.placeholderForeground\":\"#93a1a1\",\"inputOption.activeBorder\":\"#2aa298\",\"inputOption.hoverBackground\":\"#b8b8b850\",\"inputOption.activeBackground\":\"#93a1a133\",\"inputOption.activeForeground\":\"#000000\",\"inputValidation.infoBackground\":\"#f0f0f0\",\"inputValidation.infoBorder\":\"#d0d0d0\",\"inputValidation.warningBackground\":\"#daaa01\",\"inputValidation.warningBorder\":\"#e0af02\",\"inputValidation.errorBackground\":\"#f76e6e\",\"inputValidation.errorBorder\":\"#de3d3b\",\"keybindingLabel.background\":\"#dddddd66\",\"keybindingLabel.foreground\":\"#555555\",\"keybindingLabel.border\":\"#cccccc66\",\"keybindingLabel.bottomBorder\":\"#bbbbbb66\",\"menu.foreground\":\"#403f53\",\"menu.background\":\"#f0f0f0\",\"menu.selectionForeground\":\"#403f53\",\"menu.selectionBackground\":\"#d3e8f8\",\"menu.separatorBackground\":\"#d4d4d4\",\"editor.snippetTabstopHighlightBackground\":\"#0a326433\",\"editor.snippetFinalTabstopHighlightBorder\":\"#0a326480\",\"terminal.ansiBlack\":\"#403f53\",\"terminal.ansiRed\":\"#de3d3b\",\"terminal.ansiGreen\":\"#08916a\",\"terminal.ansiYellow\":\"#e0af02\",\"terminal.ansiBlue\":\"#288ed7\",\"terminal.ansiMagenta\":\"#d6438a\",\"terminal.ansiCyan\":\"#2aa298\",\"terminal.ansiWhite\":\"#f0f0f0\",\"terminal.ansiBrightBlack\":\"#403f53\",\"terminal.ansiBrightRed\":\"#de3d3b\",\"terminal.ansiBrightGreen\":\"#08916a\",\"terminal.ansiBrightYellow\":\"#daaa01\",\"terminal.ansiBrightBlue\":\"#288ed7\",\"terminal.ansiBrightMagenta\":\"#d6438a\",\"terminal.ansiBrightCyan\":\"#2aa298\",\"terminal.ansiBrightWhite\":\"#f0f0f0\",\"selection.background\":\"#7a8181ad\",\"notifications.background\":\"#f0f0f0\",\"notifications.foreground\":\"#403f53\",\"notificationLink.foreground\":\"#994cc3\",\"notifications.border\":\"#cccccc\",\"notificationCenter.border\":\"#cccccc\",\"notificationToast.border\":\"#cccccc\",\"notificationCenterHeader.foreground\":\"#403f53\",\"notificationCenterHeader.background\":\"#f0f0f0\",\"input.border\":\"#d9d9d9\",\"progressBar.background\":\"#2aa298\",\"list.inactiveSelectionBackground\":\"#e0e7ea\",\"list.inactiveSelectionForeground\":\"#403f53\",\"list.focusBackground\":\"#d3e8f8\",\"list.hoverBackground\":\"#d3e8f8\",\"list.focusForeground\":\"#403f53\",\"list.hoverForeground\":\"#403f53\",\"list.highlightForeground\":\"#403f53\",\"list.errorForeground\":\"#e64d49\",\"list.warningForeground\":\"#daaa01\",\"activityBar.background\":\"#f0f0f0\",\"activityBar.foreground\":\"#403f53\",\"activityBar.dropBackground\":\"#d0d0d0\",\"activityBarBadge.background\":\"#403f53\",\"activityBarBadge.foreground\":\"#f0f0f0\",\"activityBar.border\":\"#f0f0f0\",\"sideBar.background\":\"#f0f0f0\",\"sideBar.foreground\":\"#403f53\",\"sideBarTitle.foreground\":\"#403f53\",\"sideBar.border\":\"#f0f0f0\",\"editorGroup.background\":\"#f6f6f6\",\"editorCursor.foreground\":\"#90a7b2\",\"editor.wordHighlightBackground\":\"#339cec33\",\"editor.wordHighlightStrongBackground\":\"#007dd659\",\"editor.lineHighlightBackground\":\"#f0f0f0\",\"editor.rangeHighlightBackground\":\"#7497a633\",\"editorWhitespace.foreground\":\"#d9d9d9\",\"editorIndentGuide.background\":\"#d9d9d9\",\"editorCodeLens.foreground\":\"#403f53\",\"editorBracketMatch.background\":\"#d3e8f8\",\"editorBracketMatch.border\":\"#2aa298\",\"editorError.border\":\"#fbfbfb\",\"editorWarning.border\":\"#daaa01\",\"editorGutter.addedBackground\":\"#49d0c5\",\"editorGutter.modifiedBackground\":\"#6fbef6\",\"editorGutter.deletedBackground\":\"#f76e6e\",\"editorRuler.foreground\":\"#d9d9d9\",\"editorOverviewRuler.errorForeground\":\"#e64d49\",\"editorOverviewRuler.warningForeground\":\"#daaa01\",\"editorSuggestWidget.background\":\"#f0f0f0\",\"editorSuggestWidget.foreground\":\"#403f53\",\"editorSuggestWidget.highlightForeground\":\"#403f53\",\"editorSuggestWidget.selectedBackground\":\"#d3e8f8\",\"editorSuggestWidget.border\":\"#d9d9d9\",\"debugExceptionWidget.background\":\"#f0f0f0\",\"debugExceptionWidget.border\":\"#d9d9d9\",\"editorMarkerNavigation.background\":\"#d0d0d0\",\"editorMarkerNavigationError.background\":\"#f76e6e\",\"editorMarkerNavigationWarning.background\":\"#daaa01\",\"debugToolBar.background\":\"#f0f0f0\",\"extensionButton.prominentBackground\":\"#2aa298\",\"extensionButton.prominentForeground\":\"#f0f0f0\",\"statusBar.background\":\"#f0f0f0\",\"statusBar.border\":\"#f0f0f0\",\"statusBar.debuggingBackground\":\"#f0f0f0\",\"statusBar.debuggingForeground\":\"#403f53\",\"statusBar.foreground\":\"#403f53\",\"statusBar.noFolderBackground\":\"#f0f0f0\",\"statusBar.noFolderForeground\":\"#403f53\",\"peekView.border\":\"#d9d9d9\",\"peekViewEditor.background\":\"#f6f6f6\",\"peekViewEditorGutter.background\":\"#f6f6f6\",\"peekViewEditor.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.background\":\"#f0f0f0\",\"peekViewResult.fileForeground\":\"#403f53\",\"peekViewResult.lineForeground\":\"#403f53\",\"peekViewResult.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.selectionBackground\":\"#e0e7ea\",\"peekViewResult.selectionForeground\":\"#403f53\",\"peekViewTitle.background\":\"#f0f0f0\",\"peekViewTitleLabel.foreground\":\"#403f53\",\"peekViewTitleDescription.foreground\":\"#403f53\",\"terminal.foreground\":\"#403f53\"},\"fg\":\"#403f53\",\"bg\":\"#f6f7f9\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#556484\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#ae3c3afd\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#403f53\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#5f636f\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#3a688f\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"foreground\":\"#bb2060\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#5d6376\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#58656a\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#646464\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#286d70\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby\",\"scope\":[\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.module.ruby\",\"keyword.control.class.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Control Conditional\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"foreground\":\"#486e26\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#a64348\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#186e73\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#984e4d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#3e697c\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#555ea2\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#111111\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#7c5686\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Symbols\",\"scope\":[\"constant.language.symbol.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#954f5a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#403f53\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\",\"variable.other.property.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#76578b\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-7)\",\"terminalBackground\":\"var(--sl-color-gray-7)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-7)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#0000001a\",\"markBorderColor\":\"#00000055\"}}}],\"defaultLocale\":\"zh-CN\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"csp\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"zh-CN\",\"locales\":[{\"codes\":[\"zh-CN\"],\"path\":\"zh-CN\"},{\"codes\":[\"en\"],\"path\":\"en\"}],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",11,12,25,26,52,53,64,65,75,76,87,88,98,99,109,110,119,120,130,131,142,143,152,153,163,164,174,175,185,186,195,196,206,207,217,218,229,230,239,240,250,251,261,262,272,273,284,285,295,296,305,306,314,315],"unstar",{"id":11,"data":13,"body":22,"filePath":23,"digest":24,"deferredRender":16},{"title":14,"description":15,"editUrl":16,"head":17,"template":18,"sidebar":19,"pagefind":16,"draft":20},"支持一下","Feat unStar",true,[],"doc",{"hidden":20,"attrs":21},false,{},"import start from './img/start.png';\n\n开源不易，请为 Feat 点一个 **[⭐️ Star](https://gitee.com/smartboot/feat)** 以解锁本文访问权限。\n\n\u003Cimg src={start.src} alt=\"hello world\" width=\"100%\" className=\"shadow\"/>","src/content/docs/unstar.mdx","579966eea34f8f6d","index",{"id":25,"data":27,"body":47,"filePath":48,"assetImports":49,"digest":51,"deferredRender":16},{"title":28,"description":29,"editUrl":16,"head":30,"template":31,"hero":32,"sidebar":45,"pagefind":16,"draft":20},"Feat","一款高性能、低资源消耗的Java Web服务开发框架",[],"splash",{"tagline":33,"image":34,"actions":37},"有点像 \u003Cb>Vert.x\u003C/b>，又有点像 \u003Cb>SpringBoot\u003C/b> 的 \u003Cu>\u003Cb>AI Native\u003C/b>\u003C/u> Java Web 服务开发框架",{"alt":35,"file":36},"","__ASTRO_IMAGE_../../assets/banner.svg",[38],{"text":39,"link":40,"variant":41,"icon":42},"Feat 启程","./guides/about/","primary",{"type":43,"name":44},"icon","right-arrow",{"hidden":20,"attrs":46},{},"import { Card, CardGrid,LinkCard,LinkButton } from '@astrojs/starlight/components';\nimport FeatUsers from '../../components/FeatUsers.astro'\n\n\u003CFeatUsers/>\n\n```java title=\"Application.java\"\n@Controller\npublic class Application {\n    @RequestMapping(\"/\")\n    public String helloWorld() {\n        return \"hello Feat Cloud\";\n    }\n\n    public static void main(String[] args) {\n        Feat.cloudServer().listen();\n    }\n}\n```\n\n## 产品特色\n\n\u003CCardGrid stagger>\n\t\u003CCard title=\"\u003Cspan style='color:#ffffff;background-color:#fa541c;border-bottom: 2px solid #fa541c'> &nbsp;F&nbsp;\u003C/span>\u003Cspan style='color:#fa541c;border-bottom: 2px solid #fa541c'>lexible\u003C/span>\" icon=\"seti:happenings\">\n        灵活，以少量的代码便可实现一套 Web 服务，低成本的集成与被集成能力。\n\t\u003C/Card>\n\t\u003CCard title=\"\u003Cspan style='color:#ffffff;background-color:#722ed1;border-bottom: 2px solid #722ed1'>&nbsp;E&nbsp;\u003C/span>\u003Cspan style='color:#722ed1;border-bottom: 2px solid #722ed1'>fficient\u003C/span>\" icon=\"rocket\">\n        高效，基线能力轻松应对海量并发，十万级、百万级 QPS 皆不在话下。\n\t\u003C/Card>\n\t\u003CCard title=\"\u003Cspan style='color:#ffffff;background-color:#52c41a;border-bottom: 2px solid #52c41a'>&nbsp;A&nbsp;\u003C/span>\u003Cspan style='color:#52c41a;border-bottom: 2px solid #52c41a'>daptable\u003C/span>\" icon=\"puzzle\">\n        适配性，支持 Http1.0/1.1/2.0、Websocket、SSE(Server-sent Events)、Http路由、文件上传、WAF(Web防火墙)、TLS/SSL 等，满足各类用户需求。\n\t\u003C/Card>\n\t\u003CCard title=\"\u003Cspan style='color:#ffffff;background-color:#eb2f96;border-bottom: 2px solid #eb2f96'>&nbsp;T&nbsp;\u003C/span>\u003Cspan style='color:#eb2f96;border-bottom: 2px solid #eb2f96'>echnical\u003C/span>\" icon=\"github\">\n        技术领先性，集成自研通信框架 smart-socket，核心技术自主可控。\n\t\u003C/Card>\n\u003C/CardGrid>\n\n\n## 生态项目\n\u003CCardGrid>\n    \u003CLinkCard title=\"smart-socket\" description=\"Java AIO 实现的支持百万级长连接通信框架\" href=\"https://smartboot.tech/smart-socket\" />\n    \u003CLinkCard title=\"smart-servlet\" description=\"提供一个自主可控的轻量级 Tomcat/Undertow 可替代版本，基于 Feat 重新定义下一代 Servlet 容器!\" href=\"https://smartboot.tech/smart-servlet\" />\n    \u003CLinkCard title=\"smart-mqtt\" description=\"一款面向物联网领域的 MQTT 消息中间件产品\" href=\"https://smartboot.tech/smart-mqtt/enterprise.html\" />\n\u003C/CardGrid>\n\n\u003Chr/>\n\n\u003Ccenter>\n###  联系我们\n\n    \u003Cp>\n        Hi~ 我是 **三刀**，Feat 的作者。\n\n        您可以跟我聊聊：如何进行 Feat 的最佳实践;\n\n        也可以向我了解：关于产品实现原理的细节;\n\n        也可以跟我讨论：双方如何合作......\n\n        期待您通过下面方式，与我取得联系。\n    \u003C/p>\n\n    \u003Ch4>微信\u003C/h4>\n    \u003Cimg src=\"https://smartboot.tech/img/qrcode/personal_wx.png\" width=\"25%\"/>\n\n    \u003Ch4>邮件\u003C/h4>\n    \u003CLinkButton\n        href=\"mailto:zhengjunweimail@163.com\"\n        variant=\"secondary\"\n        icon=\"email\"\n        iconPlacement=\"start\"\n    >\n        zhengjunweimail @163.com\n    \u003C/LinkButton>\n\u003C/center>","src/content/docs/index.mdx",[50],"../../assets/banner.svg","baadc5e256577167","ai/about",{"id":52,"data":54,"body":61,"filePath":62,"digest":63,"deferredRender":16},{"title":55,"description":56,"editUrl":16,"head":57,"template":18,"sidebar":58,"pagefind":16,"draft":20},"关于","Feat AI 是一个功能强大的智能对话框架，支持多种模型和自定义配置",[],{"order":59,"hidden":20,"attrs":60},1,{},"Feat AI 是一个功能强大、灵活且高效的智能对话框架，旨在帮助开发者轻松集成和使用各种智能对话模型。它支持多种模型和自定义配置，提供了丰富的 API 接口，方便用户快速构建智能对话应用。\n\n## 核心功能\n\nFeat AI 提供了以下核心功能：\n\n1. **多模型支持**\n支持多种智能对话模型，如 DeepSeek-R1、Qwen2.5-72B 等，适用于不同的应用场景。\n\n2. **灵活配置**\n允许用户自定义 API 配置，如模型选择、API 密钥、系统提示等，满足个性化需求。\n\n3. **异步处理**\n支持异步回调机制，提升应用性能，避免阻塞主线程。\n\n4. **流式响应**\n支持流式响应，实时接收模型输出，适用于需要即时反馈的场景。\n\n## 关键接口\n\n### FeatAI 类\n\n`FeatAI` 是框架的入口类，用于创建 `ChatModel` 实例。通过 `chatModel` 方法，用户可以配置客户端选项并创建对话模型实例。\n\n```java\npublic static ChatModel chatModel(Consumer\u003COptions> consumer)\n```\n\n- **参数**：`Consumer\u003COptions>` 用于配置客户端选项。\n- **返回值**：`ChatModel` 实例，用于发送和处理聊天请求。\n\n### Options 类\n\n`Options` 类提供了丰富的配置选项，允许用户自定义模型的行为和环境。\n\n- **baseUrl**：设置模型的基 URL。\n- **model**：选择具体的模型。\n- **apiKey**：配置 API 密钥。\n- **system**：设置系统提示，指导模型的行为。\n- **debug**：启用调试模式，打印详细的请求和响应信息。\n\n### ModelMeta 类\n\n`ModelMeta` 类定义了预设的模型及其元数据，用户可以通过这些静态常量选择不同的模型。\n\n```java\npublic static final ModelMeta GITEE_AI_DeepSeek_R1 = new ModelMeta(Options.AI_VENDOR_GITEE, \"DeepSeek-R1\", false);\n```\n\n- **vendor**：模型的供应商。\n- **model**：模型的名称。\n- **toolSupport**：是否支持工具调用。\n\n### ChatModel 类\n\n`ChatModel` 是发送和处理聊天请求的核心类，提供了以下方法：\n\n- **chat**：发送同步聊天请求。\n- **chatStream**：发送异步流式聊天请求。\n- **onSuccess**：处理成功的响应。\n- **onFailure**：处理失败的响应。\n\n## 快速上手\n\n### 初始化和配置\n\n```java\nimport tech.smartboot.feat.ai.FeatAI;\nimport tech.smartboot.feat.ai.ModelMeta;\nimport tech.smartboot.feat.ai.chat.ChatModel;\n\npublic class ChatDemo {\n    public static void main(String[] args) {\n        // 创建 ChatModel 实例\n        ChatModel chatModel = FeatAI.chatModel(opts -> {\n            opts.model(ModelMeta.GITEE_AI_DeepSeek_R1)\n                .system(\"你是一个乐于助人的助手。\")\n                .debug(true);\n        });\n    }\n}\n```\n\n### 发送同步请求\n\n```java\nchatModel.chat(\"你好，请自我介绍一下。\", rsp -> {\n    System.out.println(\"rsp: \" + rsp.getContent());\n    System.out.println(\"usage: \" + rsp.getUsage());\n});\n```\n\n### 发送异步请求\n\n```java\nchatModel.chatStream(\"你好，请自我介绍一下。\", new StreamResponseCallback() {\n    @Override\n    public void onStreamResponse(String content) {\n        System.out.println(\"Streaming response: \" + content);\n    }\n\n    @Override\n    public void onCompletion(ResponseMessage responseMessage) {\n        System.out.println(\"Response completed.\");\n    }\n\n    @Override\n    public void onFailure(Throwable throwable) {\n        System.out.println(\"Error: \" + throwable.getMessage());\n    }\n});\n```\n\n## 总结\n\nFeat AI 是一个功能丰富、性能优越的智能对话框架，能够满足多种实时通信场景的需求。通过简单的 API 和灵活的配置选项，开发者可以快速构建高效的智能对话应用。其高性能、易用性和扩展性使其成为智能对话开发的理想选择。\n\n## 应用场景\n\n- **智能客服**：实时回答用户问题，提升客户满意度。\n- **虚拟助手**：帮助用户完成日常任务，提高效率。\n- **内容生成**：生成高质量的文章、报告等文本内容。","src/content/docs/ai/about.mdx","6174ba7e1d98159b","auth",{"id":64,"data":66,"body":72,"filePath":73,"digest":74,"deferredRender":16},{"title":67,"description":68,"editUrl":16,"head":69,"template":18,"sidebar":70,"pagefind":16,"draft":20},"Feat企业授权方案","助力企业高效开发，提供专业技术支持与服务",[],{"hidden":20,"attrs":71},{},"import { LinkCard, CardGrid } from '@astrojs/starlight/components';\n\n## 为什么选择Feat企业授权？\n\nFeat是一款高性能、低延迟的Java微服务框架，专为企业级应用设计。企业授权不仅能获得完整功能访问权限，还能享受专业技术支持，帮助您的团队更高效地开发和部署应用。\n\n## 授权详情\n\n- **授权费用**：仅需 **2000元** 一次性捐赠，支持项目持续发展（相当于高级开发人员1天的成本投入）\n- **授权期限**：**永久有效**，一次投入，终身受益\n- **额外福利**：\n  - 免费获得 **5个** 团队成员的文档永久访问权限\n  - 优先获取技术支持和问题解答\n  - 参与Feat新功能优先体验计划\n\n> 超出基础名额的团队成员可按每人 **299元/年** 的优惠价格购买文档访问权限\n\n## 如何申请授权\n\n请扫描下方二维码添加微信（备注：`Feat企业授权`）进行咨询\n\n\u003Cdiv style=\"text-align: center;\">\n  \u003Cimg src=\"https://smartboot.tech/img/qrcode/personal_wx.png\" alt=\"Feat授权咨询\" width=\"30%\" className=\"shadow\"/>\n\u003C/div>\n\n---\n\n## 特殊支持计划\n\n我们致力于支持创新创业和教育事业，符合以下条件的用户可申请免费使用Feat产品：\n\n\u003CCardGrid>\n    \u003CLinkCard title=\"创业企业扶持计划\" description=\"成立3年以内的初创企业，可申请免费使用Feat产品，助力创业团队快速起步。\" href=\"https://gitee.com/smartboot/feat/issues/new?template=support_plan.yml\" />\n    \u003CLinkCard title=\"高校教育助力计划\" description=\"在校大学生及教育机构可申请免费开通Feat文档访问权限，支持学术研究与教学。\" href=\"https://gitee.com/smartboot/feat/issues/new?template=support_plan_education.yml\" />\n    \u003CLinkCard title=\"Gitee个人开源项目支持计划\" description=\"针对 Gitee 平台上的个人开源项目，可申请免费使用 Feat 产品。\" href=\"https://gitee.com/smartboot/feat/issues/new?template=support_plan_gitee.yml\" />\n\u003C/CardGrid>\n\n## Feat企业价值\n\n- **高性能**：比传统框架快10倍以上，显著降低服务器成本\n- **低延迟**：毫秒级响应，提升用户体验\n- **易上手**：简洁API设计，降低学习成本\n- **高可靠**：稳定运行，减少运维压力","src/content/docs/auth.mdx","b8f991656db21a42","ai/chroma",{"id":75,"data":77,"body":84,"filePath":85,"digest":86,"deferredRender":16},{"title":78,"description":79,"editUrl":16,"head":80,"template":18,"sidebar":81,"pagefind":16,"draft":20},"向量数据库-Chroma","Feat AI",[],{"order":82,"hidden":20,"attrs":83},3,{},"Chroma 是一个开源的向量数据库，支持高效存储和检索高维向量数据。\n在 Feat 项目中，Chroma 被集成到 `VectorStore` 组件中，提供了与 Chroma 服务交互的能力。\n本教程将详细介绍如何在 Feat 中使用 Chroma 进行向量数据的管理。\n\n---\n\n\n## 安装和配置\n\n### 安装 Chroma 服务\n\n首先，需要安装并运行 Chroma 服务。你可以通过以下命令启动 Chroma：\n\n```bash\ndocker run -p 8000:8000 -p 8001:8001 chromaai/chroma:latest\n```\n\n启动后，Chroma 服务将运行在 `http://localhost:8000`。\n\n### 配置 Feat 连接 Chroma\n\n在 Feat 中，通过 `ChromaVectorStore` 类连接到 Chroma 服务。以下是一个基本配置示例：\n\n```java\nimport tech.smartboot.feat.ai.vector.ChromaVectorStore;\nimport tech.smartboot.feat.ai.vector.Document;\nimport tech.smartboot.feat.ai.vector.SearchRequest;\nimport tech.smartboot.feat.ai.vector.VectorStore;\nimport tech.smartboot.feat.ai.vector.chroma.ChromaVectorOptions;\n\npublic class ChromaConfig {\n    public static void main(String[] args) {\n        // 创建 ChromaVectorStore 实例\n        VectorStore vectorStore = ChromaVectorStore.chroma(opt -> {\n            opt.setUrl(\"http://localhost:8000\")  // Chroma 服务地址\n               .collectionName(\"my_collection\")  // 向量集合名称\n               .debug(true);                     // 开启调试模式\n        });\n\n        // 创建文档对象\n        Document document = new Document();\n        document.setId(\"1\");\n        document.setDocument(\"hello world\");  // 文本内容\n        document.setMetadata(Collections.singletonMap(\"name\", \"sndao\"));  // 元数据\n\n        // 添加文档到集合\n        vectorStore.add(Collections.singletonList(document));\n    }\n}\n```\n\n---\n\n## 创建和管理数据库\n\n### 创建数据库\n\n在 Chroma 中，数据库是数据存储的顶层单位。以下是如何通过 Feat 创建数据库的示例：\n\n```java\nimport tech.smartboot.feat.ai.vector.chroma.Chroma;\n\npublic class CreateDatabase {\n    public static void main(String[] args) {\n        Chroma chroma = new Chroma(\"http://localhost:8000\", opt -> opt.debug(true));\n        chroma.createDatabase(\"my_database\");\n        System.out.println(\"Database created successfully\");\n    }\n}\n```\n\n### 获取数据库信息\n\n```java\nimport tech.smartboot.feat.ai.vector.chroma.Chroma;\n\npublic class GetDatabase {\n    public static void main(String[] args) {\n        Chroma chroma = new Chroma(\"http://localhost:8000\", opt -> opt.debug(true));\n        String databaseInfo = chroma.getDatabase(\"my_database\");\n        System.out.println(\"Database info: \" + databaseInfo);\n    }\n}\n```\n\n### 删除数据库\n\n```java\nimport tech.smartboot.feat.ai.vector.chroma.Chroma;\n\npublic class DeleteDatabase {\n    public static void main(String[] args) {\n        Chroma chroma = new Chroma(\"http://localhost:8000\", opt -> opt.debug(true));\n        chroma.deleteDatabase(\"my_database\");\n        System.out.println(\"Database deleted successfully\");\n    }\n}\n```\n\n---\n\n## 创建和管理集合\n\n### 创建集合\n\n在 Chroma 中，集合是存储向量数据的基本单位。以下是如何创建集合的示例：\n\n```java\nimport tech.smartboot.feat.ai.vector.chroma.Chroma;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class CreateCollection {\n    public static void main(String[] args) {\n        Chroma chroma = new Chroma(\"http://localhost:8000\", opt -> opt.debug(true));\n        Map\u003CString, String> metadata = new HashMap\u003C>();\n        metadata.put(\"description\", \"My test collection\");\n\n        Collection collection = chroma.createCollection(\"my_collection\", metadata);\n        System.out.println(\"Collection created: \" + collection.getName());\n    }\n}\n```\n\n### 获取集合信息\n\n```java\nimport tech.smartboot.feat.ai.vector.chroma.Chroma;\n\npublic class GetCollection {\n    public static void main(String[] args) {\n        Chroma chroma = new Chroma(\"http://localhost:8000\", opt -> opt.debug(true));\n        Collection collection = chroma.getCollection(\"my_collection\");\n        System.out.println(\"Collection name: \" + collection.getName());\n    }\n}\n```\n\n### 删除集合\n\n```java\nimport tech.smartboot.feat.ai.vector.chroma.Chroma;\n\npublic class DeleteCollection {\n    public static void main(String[] args) {\n        Chroma chroma = new Chroma(\"http://localhost:8000\", opt -> opt.debug(true));\n        Collection collection = chroma.getCollection(\"my_collection\");\n        collection.delete();\n        System.out.println(\"Collection deleted successfully\");\n    }\n}\n```\n\n---\n\n## 添加和删除文档\n\n### 添加文档\n\n```java\nimport tech.smartboot.feat.ai.vector.Document;\nimport tech.smartboot.feat.ai.vector.VectorStore;\nimport tech.smartboot.feat.ai.vector.chroma.ChromaVectorStore;\nimport java.util.Collections;\n\npublic class AddDocument {\n    public static void main(String[] args) {\n        // 创建 ChromaVectorStore 实例\n        VectorStore vectorStore = ChromaVectorStore.chroma(opt -> {\n            opt.setUrl(\"http://localhost:8000\")\n               .collectionName(\"my_collection\")\n               .debug(true);\n        });\n\n        // 创建文档对象\n        Document document = new Document();\n        document.setId(\"1\");\n        document.setDocument(\"hello world\");  // 文本内容\n        document.setMetadata(Collections.singletonMap(\"name\", \"sndao\"));  // 元数据\n\n        // 添加文档到集合\n        vectorStore.add(Collections.singletonList(document));\n        System.out.println(\"Document added successfully\");\n    }\n}\n```\n\n### 删除文档\n\n```java\nimport tech.smartboot.feat.ai.vector.Document;\nimport tech.smartboot.feat.ai.vector.VectorStore;\nimport tech.smartboot.feat.ai.vector.chroma.ChromaVectorStore;\nimport java.util.Collections;\n\npublic class DeleteDocument {\n    public static void main(String[] args) {\n        // 创建 ChromaVectorStore 实例\n        VectorStore vectorStore = ChromaVectorStore.chroma(opt -> {\n            opt.setUrl(\"http://localhost:8000\")\n               .collectionName(\"my_collection\")\n               .debug(true);\n        });\n\n        // 删除文档\n        vectorStore.delete(\"1\");  // 删除 ID 为 \"1\" 的文档\n        System.out.println(\"Document deleted successfully\");\n    }\n}\n```\n\n---\n\n## 查询和搜索\n\n### 基于内容的相似性搜索\n\n```java\nimport tech.smartboot.feat.ai.vector.SearchRequest;\nimport tech.smartboot.feat.ai.vector.VectorStore;\nimport tech.smartboot.feat.ai.vector.chroma.ChromaVectorStore;\nimport java.util.Collections;\n\npublic class SimilaritySearch {\n    public static void main(String[] args) {\n        // 创建 ChromaVectorStore 实例\n        VectorStore vectorStore = ChromaVectorStore.chroma(opt -> {\n            opt.setUrl(\"http://localhost:8000\")\n               .collectionName(\"my_collection\")\n               .debug(true);\n        });\n\n        // 创建搜索请求\n        SearchRequest request = new SearchRequest();\n        request.setQuery(\"hello\");  // 搜索文本\n        request.setTopK(3);         // 返回前 3 个结果\n\n        // 执行相似性搜索\n        List\u003CDocument> results = vectorStore.similaritySearch(request);\n        System.out.println(\"Search results: \" + results.size());\n    }\n}\n```\n\n### 基于元数据的过滤搜索\n\n```java\nimport tech.smartboot.feat.ai.vector.SearchRequest;\nimport tech.smartboot.feat.ai.vector.VectorStore;\nimport tech.smartboot.feat.ai.vector.chroma.ChromaVectorStore;\nimport tech.smartboot.feat.ai.vector.expression.Expression;\n\npublic class MetadataSearch {\n    public static void main(String[] args) {\n        // 创建 ChromaVectorStore 实例\n        VectorStore vectorStore = ChromaVectorStore.chroma(opt -> {\n            opt.setUrl(\"http://localhost:8000\")\n               .collectionName(\"my_collection\")\n               .debug(true);\n        });\n\n        // 创建过滤表达式\n        Expression filter = Expression.of(\"name\").eq(\"sndao\");\n\n        // 创建搜索请求\n        SearchRequest request = new SearchRequest();\n        request.setQuery(\"hello\");\n        request.setExpression(filter);\n\n        // 执行搜索\n        List\u003CDocument> results = vectorStore.similaritySearch(request);\n        System.out.println(\"Filtered search results: \" + results.size());\n    }\n}\n```\n\n---\n\n## 总结\n\n通过本教程，你已经掌握了在 Feat 中使用 Chroma 进行向量数据管理的基本方法，包括：\n\n- Chroma 服务的安装与配置\n- 数据库和集合的创建与管理\n- 文档的添加与删除\n- 基于内容和元数据的搜索\n\nChroma 的强大功能使其成为处理高维向量数据的理想选择。希望本教程能帮助你快速上手，并在实际项目中发挥其优势。","src/content/docs/ai/chroma.mdx","be64d8ae14734fb2","ai/embedding",{"id":87,"data":89,"body":95,"filePath":96,"digest":97,"deferredRender":16},{"title":90,"description":79,"editUrl":16,"head":91,"template":18,"sidebar":92,"pagefind":16,"draft":20},"Embedding",[],{"order":93,"hidden":20,"attrs":94},2,{},"随着人工智能技术的飞速发展，文本嵌入（Text Embedding）已经成为自然语言处理（NLP）中的基础且重要的技术。文本嵌入通过将文本转换为高维向量，使得计算机能够理解文本的语义信息。\n\nFeat 提供了强大的嵌入式（Embedding）功能，支持多种预训练模型和自定义模型，能够将文本转换为高维向量表示，广泛应用于文本相似度计算、语义检索等场景。\n\n本教程将详细介绍如何使用 Feat 的 AI 嵌入功能，包括基本使用、高级配置以及与向量数据库的结合。\n\n---\n\n## 基本使用\n\n### 1. 单句嵌入\n\n```java\n// 加载 Gitee AI 的 bce-embedding-base_v1 模型\nEmbeddingModel embeddingModel = FeatAI.embedding(opt ->\n    opt.model(ModelVendor.GITEE_AI_BCE_BASE_V1)\n);\n\n// 对单句文本进行嵌入\nfloat[] embedding = embeddingModel.embed(\"你好！\");\nSystem.out.println(Arrays.toString(embedding));\n```\n\n**说明：**\n- `ModelVendor.GITEE_AI_BCE_BASE_V1`：使用 Gitee AI 提供的预训练嵌入模型\n- `embed` 方法返回一个浮点数数组，表示文本的高维向量表示\n- 输出结果为一个长度为 768 的向量\n\n### 2. 多句嵌入\n\n```java\nEmbeddingModel embeddingModel = FeatAI.embedding(opt ->\n    opt.model(ModelVendor.GITEE_AI_BGE_LARGE_ZH_V1_5)\n);\n\nList\u003Cfloat[]> embeddings = embeddingModel.embed(Arrays.asList(\n    \"Hello World\",\n    \"你好\"\n));\n\nembeddings.forEach(embed -> System.out.println(Arrays.toString(embed)));\n```\n\n**说明：**\n- 支持批量处理多句文本\n- 每个句子都会被转换为固定长度的向量表示\n- 返回结果为 `List\u003Cfloat[]>` 类型，每个元素对应一个句子的向量表示\n\n\n## 模型选择\n\nFeat 支持多种预训练嵌入模型，用户可以根据需求选择合适的模型：\n\n### 1. Gitee AI 模型\n\n```java\n// 使用 Gitee AI 的不同模型\nEmbeddingModel bceBaseModel = FeatAI.embedding(opt ->\n    opt.model(ModelVendor.GITEE_AI_BCE_BASE_V1)  // 基础版模型\n);\n\nEmbeddingModel bgeSmallModel = FeatAI.embedding(opt ->\n    opt.model(ModelVendor.GITEE_AI_BGE_SMALL_ZH_V1_5)  // 小型中文模型\n);\n\nEmbeddingModel bgeLargeModel = FeatAI.embedding(opt ->\n    opt.model(ModelVendor.GITEE_AI_BGE_LARGE_ZH_V1_5)  // 大型中文模型\n);\n```\n\n### 2. Ollama 模型\n\n```java\n// 使用 Ollama 本地服务\nEmbeddingModel ollamaModel = FeatAI.embedding(opt -> {\n    opt.baseUrl(\"http://localhost:11434/v1\")  // Ollama 服务地址\n        .model(ModelVendor.Ollama.nomic_embed_text);  // 使用 nomic-embed-text 模型\n});\n\nList\u003Cfloat[]> embeddings = ollamaModel.embed(Arrays.asList(\n    \"Hello World\",\n    \"你好\"\n));\n```\n\n**说明：**\n- 需要先启动 Ollama 服务\n- `nomic_embed_text` 是一个高性能的开源嵌入模型\n- 支持多种模型选择，具体模型列表可参考 ModelVendor 接口\n\n### 3. 自定义模型\n\n```java\n// 使用自定义模型\nEmbeddingModel customModel = FeatAI.embedding(opt -> {\n    opt.baseUrl(\"http://your-model-server/v1\")  // 自定义模型服务地址\n        .model(\"your-model-name\")  // 自定义模型名称\n        .apiKey(\"your-api-key\");  // 如果需要认证\n});\n```\n\n##  使用示例\n### 1. 与 Chroma 集成\n```java\n// 使用 Chroma 进行向量存储和检索\nChroma chroma = new Chroma(\"http://localhost:8000\", opt -> {\n    opt.debug(true)\n        .embeddingModel(FeatAI.embedding(embedOpt -> {\n            embedOpt.baseUrl(\"http://localhost:11434/v1\")  // Ollama 服务地址\n                .model(ModelVendor.Ollama.nomic_embed_text)  // 使用 nomic-embed-text 模型\n                .debug(true);\n        }));\n});\n\n// 创建集合\nCollection collection = chroma.createCollection(\"my_collection\");\n\n// 添加文档\nList\u003CDocument> documents = Arrays.asList(\n    new Document(\"1\", \"Hello World\"),\n    new Document(\"2\", \"你好\")\n);\ncollection.add(documents);\n\n// 查询\nQuery query = new Query();\nquery.setQueryTexts(Arrays.asList(\"Hello\"));\nquery.setInclude(Arrays.asList(\"metadatas\", \"documents\", \"distances\"));\ncollection.query(query);\n```\n\n**说明：**\n- Chroma 是一个开源的向量数据库，支持高效的向量存储和检索\n- 可通过 Chroma 进行大规模文本的语义检索\n- 支持自定义嵌入模型\n\n### 2. 文本相似度计算\n\n将文本嵌入到向量空间后，可以计算文本之间的相似度，用于推荐系统、问答系统等场景。\n\n```java\nimport tech.smartboot.feat.ai.FeatAI;\nimport tech.smartboot.feat.ai.embedding.ModelVendor;\nimport java.util.Arrays;\n\npublic class TextSimilarityExample {\n    public static void main(String[] args) {\n        var embeddingModel = FeatAI.embedding(opt -> opt.model(ModelVendor.GITEE_AI_BCE_BASE_V1));\n\n        float[] embedding1 = embeddingModel.embed(\"你好！\");\n        float[] embedding2 = embeddingModel.embed(\"您好！\");\n\n        // 计算余弦相似度\n        double similarity = cosineSimilarity(embedding1, embedding2);\n        System.out.println(\"文本相似度: \" + similarity);\n    }\n\n    private static double cosineSimilarity(float[] a, float[] b) {\n        double dotProduct = 0.0;\n        double normA = 0.0;\n        double normB = 0.0;\n\n        for (int i = 0; i \u003C a.length; i++) {\n            dotProduct += a[i] * b[i];\n            normA += Math.pow(a[i], 2);\n            normB += Math.pow(b[i], 2);\n        }\n\n        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));\n    }\n}\n```\n\n### 3. 文本分类\n\n通过嵌入向量，可以将文本映射到特定的类别，用于分类任务。\n\n```java\nimport tech.smartboot.feat.ai.FeatAI;\nimport tech.smartboot.feat.ai.embedding.ModelVendor;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TextClassificationExample {\n    public static void main(String[] args) {\n        var embeddingModel = FeatAI.embedding(opt -> opt.model(ModelVendor.GITEE_AI_BCE_BASE_V1));\n\n        List\u003CString> texts = Arrays.asList(\n            \"机器学习是人工智能的一部分。\",\n            \"深度学习是一种机器学习方法。\",\n            \"自然语言处理是计算机科学的一个领域。\"\n        );\n\n        List\u003CString> categories = Arrays.asList(\"技术\", \"技术\", \"计算机科学\");\n\n        // 假设我们有一个分类器，根据嵌入向量进行分类\n        List\u003CString> predictedCategories = classify(embeddingModel.embed(texts));\n\n        for (int i = 0; i \u003C texts.size(); i++) {\n            System.out.println(\"文本: \" + texts.get(i));\n            System.out.println(\"实际类别: \" + categories.get(i));\n            System.out.println(\"预测类别: \" + predictedCategories.get(i));\n            System.out.println(\"--------------------\");\n        }\n    }\n\n    // 简单的分类器示例\n    private static List\u003CString> classify(List\u003Cfloat[]> embeddings) {\n        // 这里只是一个示例，实际分类器需要根据具体业务逻辑实现\n        return Arrays.asList(\"技术\", \"技术\", \"计算机科学\");\n    }\n}\n```\n\n## 注意事项\n\n1. **模型选择**：\n- 不同模型的性能和适用场景不同，需根据具体需求选择\n- 预训练模型通常已经过良好训练，适合大多数场景\n\n2. **性能优化**：\n- 批量处理可以显著提高性能\n- 注意内存使用，避免一次性处理过多数据\n\n3. **错误处理**：\n- 嵌入模型调用可能抛出异常，需添加 try-catch 处理\n- 检查 API 返回状态码，处理可能的错误情况\n\n4. **安全性**：\n- 敏感信息如 API 密钥需妥善保管\n- 生产环境建议使用 HTTPS 传输\n\n---\n\n通过以上教程，您可以快速上手 Feat 的嵌入式功能，体验其强大能力。如需更深入了解，可以参考相关 API 文档或联系技术支持。","src/content/docs/ai/embedding.mdx","0d9af459365a81e4","appendix/httpstatus",{"id":98,"data":100,"body":106,"filePath":107,"digest":108,"deferredRender":16},{"title":101,"description":102,"editUrl":16,"head":103,"template":18,"sidebar":104,"pagefind":16,"draft":20},"Http 状态码","A reference page in my new Starlight docs site.",[],{"hidden":20,"attrs":105},{},"# 状态码\n## 2xx 成功\n- **200 OK**：表示请求成功。通常用于确认操作完成。\n- **201 Created**：表示请求成功并且服务器创建了新的资源。\n- **204 No Content**：表示请求成功，但没有返回任何内容。\n\n## 3xx 重定向\n- **301 Moved Permanently**：永久重定向，客户端应更新缓存。\n- **302 Found**：临时重定向，客户端应继续使用原方法访问新地址。\n- **304 Not Modified**：表示资源未被修改，客户端可以使用缓存。\n\n## 4xx 客户端错误\n- **400 Bad Request**：请求语法错误。\n- **401 Unauthorized**：未提供有效的身份验证信息。\n- **403 Forbidden**：服务器理解请求，但拒绝执行。\n- **404 Not Found**：请求的资源不存在。\n\n## 5xx 服务器错误\n- **500 Internal Server Error**：服务器内部错误。\n- **502 Bad Gateway**：服务器作为网关或代理时，从上游服务器接收到无效响应。\n- **503 Service Unavailable**：服务器暂时不可用。\n- **504 Gateway Timeout**：作为网关或代理的服务器未及时从上游服务器接收响应。","src/content/docs/appendix/httpstatus.mdx","5fc641ff3a1996e7","appendix/wechat",{"id":109,"data":111,"body":116,"filePath":117,"digest":118,"deferredRender":16},{"title":112,"description":102,"editUrl":16,"head":113,"template":18,"sidebar":114,"pagefind":16,"draft":20},"公众号精选",[],{"hidden":20,"attrs":115},{},"import { LinkCard } from '@astrojs/starlight/components';\n\n\n\u003CLinkCard\n    title=\"2025-03-12\"\n    href=\"https://mp.weixin.qq.com/s/lHVY3Vam9TBlMfU-CVo_Gg\"\n    description=\"《也许，现在正是重塑Java生态最好的时候》\"\n/>\n\n\u003CLinkCard\n    title=\"2025-03-09\"\n    href=\"https://mp.weixin.qq.com/s/r4IgzoqHCKzYbATTI44anw\"\n    description=\"《轻量级Java框架的性能之王》\"\n/>\n\n\u003CLinkCard\n    title=\"2025-02-11\"\n    href=\"https://mp.weixin.qq.com/s/azMX0KA6RzdkPaLC5YG7Ng\"\n    description=\"《DeepSeek助力打造的国产Java Web服务开发框架》\"\n/>","src/content/docs/appendix/wechat.mdx","b9f0e1437525f66d","appendix/static_transcoding",{"id":119,"data":121,"body":127,"filePath":128,"digest":129,"deferredRender":16},{"title":122,"description":123,"editUrl":16,"head":124,"template":18,"sidebar":125,"pagefind":16,"draft":20},"静态转码原理","图文并茂地解释Feat Cloud如何通过编译期代码生成技术提升性能，避免反射带来的开销",[],{"hidden":20,"attrs":126},{},"import static_transcoding_diagram from './img/static_transcoding_diagram.svg'\nimport translator_comparison from './img/translator_comparison.svg'\nimport restaurant_comparison from './img/restaurant_comparison.svg'\nimport code_generation_process from './img/code_generation_process.svg'\n\n## 什么是静态转码？一个简单的类比\n\n想象你是一位翻译员，有两种工作方式：\n\n1. **传统方式（反射）**：每次有人说话，你都需要查词典，理解语法，然后翻译 - 这个过程很灵活但很慢\n2. **提前准备（静态转码）**：提前知道可能的对话内容，预先准备好翻译稿 - 翻译时直接读出来，又快又准\n\n\u003Cdiv style=\"text-align: center; margin: 20px 0;\">\n  \u003Cimg src={translator_comparison.src} alt=\"翻译员工作方式对比图\" style=\"max-width: 100%; height: auto;\" />\n\u003C/div>\n\nJava框架中，依赖注入(DI)和面向切面编程(AOP)就像这种翻译工作。传统框架如Spring使用\"查词典\"的方式（反射），而Feat Cloud采用\"提前准备翻译稿\"的方式（静态转码）。\n\n## 为什么要关注这个问题？\n\n在Java应用开发中，我们经常使用Spring等框架来简化开发。这些框架让我们可以通过简单的注解（如`@Autowired`）来自动连接各个组件，非常方便。但这种便利是有代价的 - 反射机制会带来性能损耗。\n\nFeat Cloud通过创新的静态转码技术，让你既能享受类似Spring的开发便利，又能获得更好的性能。\n\n\u003Cdiv style=\"text-align: center; margin: 20px 0;\">\n  \u003Cimg src={static_transcoding_diagram.src} alt=\"Feat Cloud静态转码与传统反射对比图\" style=\"max-width: 100%; height: auto;\" />\n\u003C/div>\n\n## 传统方式与静态转码的区别 - 餐厅点餐的例子\n\n### 传统反射方式（临时翻译菜单）\n\n想象一家餐厅，每位顾客点餐时：\n1. 服务员需要查看菜单（**解析注解**）\n2. 厨师需要临时查看食谱（**动态代理**）\n3. 每道菜都需要现场确认原料（**反射调用**）\n\n这种方式的问题：\n- 点餐和准备过程慢（**性能开销大**）\n- 开业准备时间长（**启动时间长**）\n- 不适合提前准备食材（**不利于AOT编译**）\n\n### Feat Cloud静态转码方式（提前准备好的流程）\n\n而Feat Cloud的餐厅是这样的：\n1. 在开业前就准备好所有可能的菜单和食谱（**编译期处理**）\n2. 顾客点餐时，直接按照预设流程操作（**零反射**）\n3. 所有食材和工具都提前分类摆放好（**类型安全**）\n\n\u003Cdiv style=\"text-align: center; margin: 20px 0;\">\n  \u003Cimg src={restaurant_comparison.src} alt=\"餐厅点餐流程对比图\" style=\"max-width: 100%; height: auto;\" />\n\u003C/div>\n\n## 静态转码是如何工作的？\n\n### 简单来说\n\nFeat Cloud使用一个特殊的工具（注解处理器），在你编写代码的时候就帮你把所有\"翻译工作\"提前做好。当程序运行时，就不需要再去\"查词典\"了。\n\n### 技术原理\n\nFeat Cloud使用Java的注解处理器（APT）技术，在编译阶段：\n\n1. **识别特殊标记**：找出代码中的`@Bean`、`@Autowired`等注解\n2. **生成辅助代码**：为每个标记的类生成一个\"加载器\"类\n3. **建立直接连接**：在生成的代码中，直接写明各个组件之间如何连接\n\n这样，当程序运行时，就可以直接使用这些提前建立好的连接，而不需要通过反射去动态查找和连接组件。\n\n\u003Cdiv style=\"text-align: center; margin: 20px 0;\">\n  \u003Cimg src={code_generation_process.src} alt=\"静态转码代码生成过程\" style=\"max-width: 100%; height: auto;\" />\n\u003C/div>\n\n## 一个简化的例子\n\n假设我们有一个简单的控制器类：\n\n```java\n@Controller(\"/user\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n    \n    @RequestMapping(\"/get\")\n    public User getUser(String id) {\n        return userService.getById(id);\n    }\n}\n```\n\n### 传统框架如何处理\n\n传统框架在运行时会：\n1. 扫描类找到`@Controller`注解\n2. 通过反射创建`UserController`实例\n3. 找到`@Autowired`字段，通过反射注入`UserService`\n4. 找到`@RequestMapping`方法，注册路由\n5. 请求到来时，通过反射调用`getUser`方法\n\n### Feat Cloud如何处理\n\nFeat Cloud在编译时会生成一个加载器类：\n\n```java\npublic class UserControllerBeanAptLoader extends AbstractServiceLoader {\n    private UserController bean;\n    \n    public void loadBean(ApplicationContext applicationContext) {\n        // 直接创建实例，不用反射\n        bean = new UserController();\n    }\n    \n    public void autowired(ApplicationContext applicationContext) {\n        // 直接调用setter方法，不用反射\n        bean.setUserService(applicationContext.getBean(\"userService\"));\n    }\n    \n    public void router(Router router) {\n        // 直接注册路由，不用反射\n        router.route(\"/user/get\", ctx -> {\n            String id = ctx.getParam(\"id\");\n            User result = bean.getUser(id);\n            ctx.json(result);\n        });\n    }\n}\n```\n\n## 静态转码的优势\n\n1. **更高性能**：没有反射开销，方法调用更快\n2. **更快启动**：不需要运行时扫描和解析注解\n3. **更小内存**：不需要保存反射相关的元数据\n4. **更好兼容性**：适合GraalVM原生镜像和Android等平台\n5. **编译期检查**：类型错误在编译时就能发现，而不是运行时\n\n## 实际应用场景\n\n静态转码技术特别适合以下场景：\n\n1. **微服务**：需要快速启动和低资源消耗\n2. **高并发系统**：需要最大化性能\n3. **边缘计算**：资源受限的环境\n4. **原生镜像部署**：使用GraalVM编译为原生镜像\n5. **移动应用**：Android应用开发\n\n## 总结\n\nFeat Cloud的静态转码技术通过在编译期间生成代码，避免了运行时反射带来的性能损耗，同时保持了类似Spring的开发体验。这就像是一位翻译员，不是在现场临时查词典翻译，而是提前准备好所有可能的翻译内容，使得工作更加高效。\n\n如果你的应用需要更高的性能和更快的启动速度，同时又不想放弃框架带来的便利性，Feat Cloud的静态转码技术是一个值得考虑的选择。","src/content/docs/appendix/static_transcoding.mdx","38b9023a45935893","cloud/db",{"id":130,"data":132,"body":139,"filePath":140,"digest":141,"deferredRender":16},{"title":133,"description":134,"editUrl":16,"head":135,"template":18,"sidebar":136,"pagefind":16,"draft":20},"数据库开发","一款企业级 Web 服务开发框架",[],{"order":137,"hidden":20,"attrs":138},5,{},"import {TabItem, Tabs,Aside} from \"@astrojs/starlight/components\";\nimport CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n\nFeat Cloud 已同 Mybatis 做了一定程度的集成，你可以直接使用 Mybatis 提供的 Mapper 接口来进行数据库的操作。本章将介绍如何在 Feat Cloud 中使用 Mybatis 进行数据库开发。\n\n## 配置 mybatis-config.xml\n在 `src/main/resources` 目录下创建 `mybatis-config.xml`， 文件内容如下：\n```xml\n\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\u003C!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"https://mybatis.org/dtd/mybatis-3-config.dtd\">\n\u003Cconfiguration>\n    \u003C!-- 可选：配置MyBatis的全局行为 -->\n    \u003Csettings>\n        \u003C!-- 开启驼峰命名自动映射 -->\n        \u003Csetting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n        \u003C!-- 开启二级缓存 -->\n        \u003Csetting name=\"cacheEnabled\" value=\"true\"/>\n    \u003C/settings>\n    \n    \u003C!-- 可选：类型别名配置 -->\n    \u003CtypeAliases>\n        \u003Cpackage name=\"org.smartboot.feat.demo.model\"/>\n    \u003C/typeAliases>\n    \n    \u003C!-- 可选：插件配置 -->\n    \u003Cplugins>\n        \u003C!-- 分页插件示例 -->\n        \u003Cplugin interceptor=\"com.github.pagehelper.PageInterceptor\">\n            \u003Cproperty name=\"helperDialect\" value=\"mysql\"/>\n        \u003C/plugin>\n    \u003C/plugins>\n    \n    \u003C!-- 必选：环境配置 -->\n    \u003Cenvironments default=\"mysql\">\n        \u003Cenvironment id=\"mysql\">\n            \u003C!-- 使用JDBC事务管理器 -->\n            \u003CtransactionManager type=\"JDBC\"/>\n            \u003C!-- 数据源配置 -->\n            \u003CdataSource type=\"POOLED\">\n                \u003Cproperty name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                \u003Cproperty name=\"url\" value=\"jdbc:mysql://localhost:3306/test?characterEncoding=utf-8\"/>\n                \u003Cproperty name=\"username\" value=\"root\"/>\n                \u003Cproperty name=\"password\" value=\"root\"/>\n            \u003C/dataSource>\n        \u003C/environment>\n    \u003C/environments>\n    \n    \u003C!-- 必选：Mapper接口扫描配置 -->\n    \u003Cmappers>\n        \u003Cpackage name=\"org.smartboot.feat.demo.dao.mapper\"/>\n    \u003C/mappers>\n\u003C/configuration>\n```\n\n\u003CAside type=\"tip\">\n配置文件可以放置在任意子目录下，例如 `src/main/resources/mybatis/mybatis-config.xml`。建议将配置文件放在专门的目录中以便管理。\n\u003C/Aside>\n\n## 实例化 SessionFactory Bean\nFeat Cloud 提供了两种方式来实例化 SqlSessionFactory：\n\n\u003CTabs>\n    \u003CTabItem label=\"独立的Bean类（推荐）\">\n    ```java\n    @Bean\n    public class MybatisSessionFactory {\n        @Bean(\"sessionFactory\")\n        public SqlSessionFactory sessionFactory() throws IOException {\n            return new SqlSessionFactoryBuilder().build(\n                Resources.getResourceAsStream(\"mybatis/mybatis-config.xml\")\n            );\n        }\n    }\n    ```\n    \u003C/TabItem>\n\n    \u003CTabItem label=\"Controller中定义\">\n    ```java\n    @Controller\n    public class ControllerDemo {\n        @Bean(\"sessionFactory\")\n        public SqlSessionFactory sessionFactory() throws IOException {\n            return new SqlSessionFactoryBuilder().build(\n                Resources.getResourceAsStream(\"mybatis/mybatis-config.xml\")\n            );\n        }\n    }\n    ```\n    \u003C/TabItem>\n\u003C/Tabs>\n\n\u003CAside type=\"caution\">\n   生成的 SqlSessionFactory 对象 bean 名称必须为 **sessionFactory**。这是 Feat Cloud 约定的固定名称。\n\u003C/Aside>\n\n## 定义@Mapper接口\n@Mapper 接口的定义方式与 Spring 基本一致。以下是一个完整的示例，展示了常用的 SQL 操作和动态 SQL 的使用：\n\n```java title=\"UserMapper.java\"\n@Mapper\npublic interface UserMapper {\n    // 动态SQL查询示例\n    @Select({\"\u003Cscript>\",\n            \"SELECT * FROM user_info\",\n            \"\u003Cwhere>\",\n            \"    \u003Cif test='username != null'>AND username LIKE CONCAT('%', #{username}, '%')\u003C/if>\",\n            \"    \u003Cif test='role != null'>AND role = #{role}\u003C/if>\",\n            \"\u003C/where>\",\n            \"ORDER BY username\",\n            \"\u003C/script>\"})\n    @ResultType(UserDO.class)\n    List\u003CUserDO> getUserList(UserQuery query);\n\n    // 基本查询示例\n    @Select(\"SELECT * FROM user_info WHERE username=#{username} AND password=#{password}\")\n    @ResultType(UserDO.class)\n    UserDO getUser(@Param(\"username\") String username, @Param(\"password\") String password);\n\n    // 插入示例\n    @Insert(\"INSERT INTO user_info(username,password,role,`desc`) \"\n         + \"VALUES(#{username},#{password},#{role},#{desc})\")\n    @Options(useGeneratedKeys = true, keyProperty = \"id\")\n    void insert(UserDO userDO);\n\n    // 批量删除示例\n    @Delete(\"\u003Cscript>\"\n         + \"DELETE FROM user_info WHERE username IN\"\n         + \"\u003Cforeach collection='users' item='username' open='(' close=')' separator=','>\" \n         + \"    #{username}\"\n         + \"\u003C/foreach>\"\n         + \"\u003C/script>\")\n    int deleteUsers(@Param(\"users\") List\u003CString> usernames);\n\n    // 更新示例\n    @Update(\"UPDATE user_info SET password=#{password}, role=#{role} \"\n         + \"WHERE username=#{username}\")\n    int updateUser(UserDO user);\n}\n```\n\n## 使用@Mapper\nMapper 接口可以通过 `@Autowired` 注解注入到其他 Bean 中使用。\n\n```java title=\"UserService.java\"\n@Service\npublic class UserService {\n    @Autowired\n    private UserMapper userMapper;\n\n    // 使用事务注解\n    public void createUser(UserDO user) {\n        // 检查用户是否存在\n        UserDO existingUser = userMapper.getUser(user.getUsername(), null);\n        if (existingUser != null) {\n            throw new RuntimeException(\"用户已存在\");\n        }\n        // 创建新用户\n        userMapper.insert(user);\n    }\n\n    // 批量操作示例\n    public void batchUpdateUsers(List\u003CUserDO> users) {\n        for (UserDO user : users) {\n            userMapper.updateUser(user);\n        }\n    }\n}\n```","src/content/docs/cloud/db.mdx","5d62e80c266654eb","cloud/options",{"id":142,"data":144,"body":149,"filePath":150,"digest":151,"deferredRender":16},{"title":145,"description":134,"editUrl":16,"head":146,"template":18,"sidebar":147,"pagefind":16,"draft":20},"CloudOptions 配置",[],{"order":82,"hidden":20,"attrs":148},{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\nimport {Aside, TabItem, Tabs} from \"@astrojs/starlight/components\";\n\n\u003CCheckAuthorize/>\n\n# CloudOptions 配置\nCloudOptions 定义了 Feat Cloud 服务的配置信息，它继承自 [ServerOptions](/feat/server/serveroptions/)，因此除了自身特有的配置项外，还可以使用 ServerOptions 中的所有配置项。\n\n## CloudOptions 特有配置项\n\n### packages\n**类型**: `String[]`\n\n**默认值**: `null`\n\n用于指定 Feat Cloud 启动时扫描的包路径，限制组件扫描范围以提升启动性能。\n\n**使用示例**:\n```java\nFeatCloud.cloudServer(options -> {\n    options.setPackages(\"com.example.controller\", \"com.example.service\");\n});\n```\n\n**最佳实践**:\n- 明确指定包路径可以提高应用启动速度，减少不必要的类扫描\n- 在大型项目中，建议按功能模块划分包，并只加载需要的包\n\n### registerBean\n**类型**: `Map\u003CString, Object>`\n\n**默认值**: `空Map`\n\n定义了 Feat Cloud 启动时加载的外部 Bean 配置，可以通过 `registerBean` 方法添加外部 Bean。\n\n**使用示例**:\n```java\nFeatCloud.cloudServer(options -> {\n    options.registerBean(\"dataSource\", createDataSource());\n    options.registerBean(\"redisClient\", createRedisClient());\n});\n```\n\n**最佳实践**:\n- 使用有意义的键名，便于在应用中引用\n- 注意避免Bean名称冲突，否则会抛出异常","src/content/docs/cloud/options.mdx","662fdf201d67d113","cloud/controller",{"id":152,"data":154,"body":160,"filePath":161,"digest":162,"deferredRender":16},{"title":155,"description":134,"editUrl":16,"head":156,"template":18,"sidebar":157,"pagefind":16,"draft":20},"Controller 开发",[],{"order":158,"hidden":20,"attrs":159},4,{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\nimport {TabItem, Tabs, Aside} from \"@astrojs/starlight/components\";\n\n\u003CCheckAuthorize/>\n\nFeat Cloud 在设计 Controller 注解时，一定程度上延用了 Spring 的设计理念，使得用户更容易理解和运用。\n\n当然，我们也并非完全复刻 Spring 的 Controller 注解，而是进行了极致的简化，剔除了不必要的灵活性。\n\n**相关注解：**\n- tech.smartboot.feat.cloud.annotation.Controller\n- tech.smartboot.feat.cloud.annotation.RequestMapping\n- tech.smartboot.feat.cloud.annotation.Param\n- tech.smartboot.feat.cloud.annotation.PathParam\n- tech.smartboot.feat.cloud.annotation.InterceptorMapping\n\n## 注解详解\n\n### `@Controller`\n`@Controller` 用于标记一个类为控制器，作为 Spring 风格的注解设计，降低学习成本。\n\n通常与 `@RequestMapping` 一起使用来定义请求映射路径。\n\n**定义：**\n```java\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.SOURCE)\n@Documented\npublic @interface Controller {\n    String value() default \"\";\n}\n```\n\n**value 参数说明：**\n- `value()` 定义了 Controller 的基础路径，其他方法级别的请求路径会基于这个基础路径。\n- 默认情况下，value 是一个空字符串，意味着没有基础路径前缀。\n- 示例：如果设置 `@Controller(\"/user\")`，那么该 Controller 下的所有方法将通过 `/user` 路径前缀访问。\n\n### `@RequestMapping`\n`@RequestMapping` 用于标记方法，表示该方法处理特定的 HTTP 请求路径。\n\n支持指定HTTP请求方法，有效类型：`GET`, `HEAD`, `POST`, `PUT`, `PATCH`, `DELETE`, `OPTIONS`, `TRACE`\n**定义：**\n```java\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.SOURCE)\n@Documented\npublic @interface RequestMapping {\n    String value() default \"\";\n\n    RequestMethod[] method() default {};\n}\n```\n\n**参数说明：**\n- **value**: 指定与该方法关联的 URL 路径，默认为空字符串，意味着使用 Controller 级别的路径前缀（如果有）。\n- **method**: 指定该方法支持的 HTTP 请求类型，默认不限制请求方法，即所有类型都可以访问该方法。\n\n### `@Param`\n`@Param` 用于绑定请求中的查询参数（Query Parameters）到方法参数上。当方法参数为自定义POJO类型时，可无需使用`@Param`注解，框架会自动进行参数绑定。\n\n**定义：**\n```java\n@Target({ElementType.PARAMETER})\n@Retention(RetentionPolicy.SOURCE)\n@Documented\npublic @interface Param {\n    /**\n     * 指定要绑定的查询参数的名称。\n     *\n     * @return 参数名称\n     */\n    String value();\n}\n```\n**value 参数说明：**\n- 如果 HTTP 请求中没有与 `value` 匹配的查询参数，则方法参数将被赋予默认值（如 null、0 或 false，取决于类型）。\n- 示例：若方法定义为 `@Param(\"id\") int userId`，则会尝试从请求中获取名为 `id` 的参数并转换为整数赋值给 `userId`。\n\n### `@PathParam`\n`@PathParam` 用于绑定请求中的路径参数（Path Parameters）到方法参数上。\n\n**定义：**\n```java\n@Target({ElementType.PARAMETER})\n@Retention(RetentionPolicy.SOURCE)\n@Documented\npublic @interface PathParam {\n    /**\n     * 参数名称\n     *\n     * @return 参数名称\n     */\n    String value();\n}\n```\n\n**value 参数说明：** 指定要绑定的路径参数的名称，该名称必须与路由中定义的占位符名称一致。\n- 示例：若 URL 定义为 `/user/{id}`，则应使用 `@PathParam(\"id\")` 来绑定路径中的 `id` 值到方法参数。\n- 如果 HTTP 请求路径中没有匹配的参数名，则框架会抛出异常或自动赋予默认值（如 null、0 等），具体行为取决于框架实现和参数类型。\n\n### `@InterceptorMapping`\n`@InterceptorMapping` 用于为特定的请求路径添加拦截器逻辑，在请求到达目标方法之前执行一些操作。\n\n**定义：**\n```java\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.SOURCE)\n@Documented\npublic @interface InterceptorMapping {\n\n    String[] value() default \"\";\n}\n```\n\n**value 参数说明：** 指定拦截器应用的 URL 路径模式数组。\n- 支持精确匹配（如 `/path`）和通配符匹配（如 `/path/*`）。\n- 如果未指定，默认为空数组，表示拦截器不匹配任何请求。\n- 示例：若设置 `@InterceptorMapping({\"/user\", \"/api/*\"})`，则该拦截器会作用于所有 `/user` 和 `/api` 下的请求路径。\n\n## 基本使用\n\n创建一个简单的 Controller 示例：\n\n```java\n@Controller(\"userApi\")\npublic class UserController {\n    \n    // 支持路径参数\n    @RequestMapping(\"/users/:id\")\n    public String getUser(@PathParam(\"id\") String id) {\n        return \"User: \" + id;\n    }\n    \n    // 支持查询参数\n    @RequestMapping(\"/users/search\")\n    public String searchUsers(@Param(\"name\") String name, @Param(\"age\") int age) {\n        return \"Search users with name: \" + name + \", age: \" + age;\n    }\n    \n    // 支持对象参数绑定\n    @RequestMapping(\"/users/create\")\n    public RestResult\u003CMap\u003CString, String>> createUser(UserParam param) {\n        RestResult\u003CMap\u003CString, String>> result = new RestResult\u003C>();\n        result.setData(Collections.singletonMap(\"id\", \"123\"));\n        return result;\n    }\n}\n```\n\n## 拦截器使用\n\n通过 `@InterceptorMapping` 注解可以为 Controller 添加拦截器，以实现请求的预处理或后处理逻辑。\n\n```java\n// 为用户API添加拦截器\n@InterceptorMapping({\"/users/*\"})\npublic Interceptor userApiInterceptor() {\n    return (context, completableFuture, chain) -> {\n        System.out.println(\"Intercepting user API request...\");\n        // 可以在请求处理前执行前置逻辑\n        \n        // 继续执行请求链\n        chain.proceed(context, completableFuture);\n        \n        // 可以在请求处理后执行后置逻辑\n        System.out.println(\"Finished intercepting user API request.\");\n    };\n}\n```\n\n**说明与注意事项：**\n- **拦截路径匹配**：`@InterceptorMapping` 的 `value` 属性用于指定拦截器生效的路径模式，支持精确匹配（如 `/user`）和通配符匹配（如 `/user/*`）。\n- **拦截器顺序**：多个拦截器按照定义顺序依次执行，形成拦截器链。\n- **异步处理**：由于 HTTP 请求处理可能是异步的，因此拦截器中应正确处理 `CompletableFuture`。\n- **避免阻塞**：拦截器中的逻辑不应长时间阻塞主线程，建议将耗时操作提交到独立线程池。\n- **异常处理**：拦截器内部需要自行捕获并处理异常，防止因未处理异常导致请求失败。\n\n## 性能优势\n\n与 Spring Boot 相比，Feat Cloud 的注解处理方式有本质区别：\n\n| 特性 | Feat Cloud | Spring Boot |\n|------|------------|-------------|\n| 注解处理时机 | 编译期 | 运行时 |\n| 反射使用 | 不需要 | 需要 |\n| 性能 | 更高 | 相对较低 |\n| 灵活性 | 简洁高效 | 更加灵活 |\n\n这种设计使得 Feat Cloud 在保持类似 Spring Boot 开发体验的同时，实现了更好的性能表现。","src/content/docs/cloud/controller.mdx","eb5fe3dde067229d","client/http_client",{"id":163,"data":165,"body":171,"filePath":172,"digest":173,"deferredRender":16},{"title":166,"description":167,"editUrl":16,"head":168,"template":18,"sidebar":169,"pagefind":16,"draft":20},"HttpClient详解","Feat HttpClient 是一个功能强大的HTTP客户端库，支持多种请求方法和高级配置",[],{"order":59,"hidden":20,"attrs":170},{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n\nFeat HttpClient 是一个功能强大、灵活且高效的 HTTP 客户端库，旨在帮助开发者轻松发送 HTTP 请求、处理响应，并支持多种高级功能。它支持常见的 HTTP 方法（如 GET、POST、PUT、DELETE 等），并提供了灵活的配置选项，以满足不同场景下的需求。\n\nFeat HttpClient 的设计理念注重性能、易用性和扩展性，能够与 Feat 框架的其他组件无缝集成，为开发者提供一致的开发体验。\n\n## 快速上手\n\n### 引入依赖\n\n在 Maven 项目中，添加以下依赖到 `pom.xml`：\n\n```xml\n\u003Cdependency>\n    \u003CgroupId>tech.smartboot.feat\u003C/groupId>\n    \u003CartifactId>feat-core\u003C/artifactId>\n    \u003Cversion>${feat.version}\u003C/version>\n\u003C/dependency>\n```\n\n### 发送第一个 GET 请求\n\n以下是一个简单的示例，展示了如何使用 Feat HttpClient 发送 GET 请求并处理响应：\n\n```java\nimport tech.smartboot.feat.core.client.HttpClient;\nimport java.io.IOException;\n\npublic class HttpClientDemo {\n    public static void main(String[] args) throws IOException {\n        // 创建 HttpClient 实例\n        HttpClient client = new HttpClient(\"https://www.baidu.com\");\n\n        // 发送 GET 请求\n        client.get().onSuccess(response -> {\n            // 处理响应\n            System.out.println(\"Status Code: \" + response.statusCode());\n            System.out.println(\"Body: \" + response.body());\n        }).done();\n    }\n}\n```\n\n---\n\n## HttpClient 实例化\nHttpClient 提供了 2 种实例化方式：\n\n**方式一：完整的请求URL**\n```java\nHttpClient client = new HttpClient(\"http://127.0.0.1:8080\");\n\nHttpClient client = new HttpClient(\"https://smartboot.tech/feat/\");\n```\n该种方式会自动解析 URL 中的 host 和 port 信息，并识别是否使用 HTTPS 协议。\n\n**方式二：指定 host、port**\n```java\nHttpClient httpClient = new HttpClient(\"127.0.0.1\", 8080);\n\nHttpClient httpClient = new HttpClient(\"smartboot.tech\", 443);\n```\n\n\n## Options 配置\n通过 HttpClient.options() 方法提供了客户端的配置选项，支持链式调用。\n### host\n**类型:** `String`\n\n**默认值:** `null`\n\n服务地址，必填\n\n### port\n**类型:** `int`\n\n**默认值:** `80`\n\n服务端口\n\n\n### connectTimeout\n**类型:** `int`\n\n**默认值:** `0`\n\n连接超时时间，单位毫秒\n\n### readBufferSize\n**类型:** `int`\n\n**默认值:** `1024`\n\n读缓冲区大小，单位：字节。合理的大小可以减少系统调用次数，提高性能。\n\n### writeBufferSize\n**类型:** `int`\n\n**默认值:** `1024`\n\n写缓冲区大小，单位：字节。合理的大小可以减少系统调用次数，提高性能。\n\n### debug\n**类型:** `boolean`\n\n**默认值:** `false`\n\n是否开启调试模式。启用后会在控制台打印请求和响应的详细信息。\n\n### proxy\n**类型:** `ProxyOptions`\n\n**默认值:** `null`\n\n代理配置。\n\n## HTTP请求\nHttpClient 提供了 rest() 方法用于发送通用的 HTTP 请求。rest() 方法的参数包括：\n- method: HTTP 请求方法，如 GET、POST、PUT、DELETE 等。\n- path: 请求路径，如 /api/user。\n\n请求构造完毕后，需要调用 submit() 方法发送请求。\n\n```java title=HttpRestDemo.java \"rest\" \"HttpMethod.GET\" \"submit\"\npublic class HttpRestDemo {\n    public static void main(String[] args) throws IOException {\n        // 创建 HttpClient 实例\n        HttpClient client = new HttpClient(\"https://smartboot.tech\");\n        client.options().debug(true);\n        // 发送 GET 请求\n        client.rest(HttpMethod.GET, \"/feat/\").onSuccess(response -> {\n            System.out.println(\"Status Code: \" + response.statusCode());\n            System.out.println(\"Body: \" + response.body());\n        }).submit();\n    }\n}\n```\n\n对于 GET、POST 等常见的 HTTP 请求方法，HttpClient 提供了对应的方法，如 get()、post() 等，例如：\n```java title=HttpGetDemo.java \"get\" \"submit\"\npublic class HttpGetDemo {\n    public static void main(String[] args) {\n        HttpClient httpClient = new HttpClient(\"https://smartboot.tech\");\n        httpClient.get(\"/feat/\")\n                .onSuccess(response -> System.out.println(response.body()))\n                .onFailure(Throwable::printStackTrace)\n                .submit();\n    }\n}\n```\n\n## 异步回调\nHttpClient 提供了异步回调机制，可以在请求发送后立即返回，而不需要等待请求完成。\n\n### onResponseHeader\n当响应 Header 解析完成后，会触发 onResponseHeader 回调。\n```java title=ResponseHeaderDemo.java \"onResponseHeader\"\npublic class ResponseHeaderDemo {\n    public static void main(String[] args) {\n        HttpClient httpClient = new HttpClient(\"https://smartboot.tech\");\n        httpClient.get(\"/feat/\")\n                .onResponseHeader(response -> {\n                    for (String name : response.getHeaderNames()) {\n                        System.out.println(name + \": \" + response.getHeader(name));\n                    }\n                })\n                .submit();\n    }\n}\n```\n\n### onResponseBody\n对于存在响应体的请求，当`onResponseHeader`回调结束并开始接收到Body内容时，会触发 onResponseBody 回调。\n```java title=ResponseBodyDemo.java \"onResponseBody\"\npublic class ResponseBodyDemo {\n    public static void main(String[] args) {\n        HttpClient httpClient = new HttpClient(\"https://smartboot.tech\");\n        httpClient.get(\"/feat/\")\n                .onResponseBody(new Stream() {\n                    @Override\n                    public void stream(HttpResponse response, byte[] bytes, boolean end) throws IOException {\n                        System.out.println(\"接收到数据：\" + new String(bytes));\n                        if (end) {\n                            System.out.println(\"数据接收完毕\");\n                        }\n                    }\n                })\n                .submit();\n    }\n}\n```\nonResponseBody 的参数是一个 Stream 对象，用于消费响应体的内容：\n- response: HttpResponse 对象，表示当前的响应。\n- bytes: 字节数组，表示接收到的响应体内容。\n- end: boolean 值，表示是否接收到了响应体的最后一部分内容。\n### onSuccess\n当请求成功时，会触发 onSuccess 回调。该回调发生于 onResponseBody 正常结束之后。\n### onFailure\n当请求失败时，会触发 onFailure 回调。","src/content/docs/client/http_client.mdx","8524c94dea344e6a","client/ws_client",{"id":174,"data":176,"body":182,"filePath":183,"digest":184,"deferredRender":16},{"title":177,"description":178,"editUrl":16,"head":179,"template":18,"sidebar":180,"pagefind":16,"draft":20},"WebSocket详解","Feat Client",[],{"order":93,"hidden":20,"attrs":181},{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n随着 Web 技术的快速发展，WebSocket 已经成为实时通信应用的首选技术。它能够实现浏览器与服务器之间的全双工通信，适用于实时聊天、在线游戏、股票交易、物联设备控制等场景。\n\nWebSocketClient 是 Feat 框架中的一款高性能 WebSocket 客户端实现，旨在为开发者提供灵活、高效、易用的 WebSocket 开发体验。\n\n本文将详细介绍 Feat WebSocketClient 的功能、核心接口以及使用方法。\n\n---\n\n## 核心功能\n\nFeat WebSocketClient 提供了以下核心功能：\n\n1. **WebSocket 连接管理**：\n- 支持 WebSocket 协议（ws:// 和 wss://）。\n- 支持连接建立、断开、重连等生命周期管理。\n- 提供连接状态监控和事件通知。\n\n2. **消息传输**：\n- 支持文本消息（String）和二进制消息（byte[]）的发送与接收。\n- 支持消息的异步处理，避免阻塞主线程。\n\n3. **事件监听**：\n- 提供 `onOpen`（连接成功）、`onClose`（连接关闭）、`onError`（发生错误）、`onMessage`（接收消息）等事件回调，方便开发者处理各种场景。\n\n4. **配置灵活**：\n- 支持设置连接超时、读写缓冲区大小、代理配置等。\n- 支持自定义 SSL/TLS 配置，满足安全通信需求。\n\n---\n\n## 核心接口\n\nFeat WebSocketClient 的核心接口包括以下几个部分：\n\n### WebSocketClient 类\n\n`WebSocketClient` 是客户端的主要入口类，提供了以下核心方法：\n\n- **构造方法**：\n```java\npublic WebSocketClient(String url)\n  ```\n使用 WebSocket URL 初始化客户端实例，支持 `ws://` 和 `wss://` 协议。\n\n- **配置方法**：\n```java\npublic WebSocketOptions options()\n  ```\n获取配置对象，用于设置客户端的各项参数，如超时时间、读写缓冲区大小、代理等。\n\n- **连接方法**：\n```java\npublic void connect(WebSocketListener listener)\n  ```\n使用指定的监听器建立 WebSocket 连接。\n\n- **发送消息**：\n```java\npublic void sendMessage(String message) throws IOException\npublic void sendBinary(byte[] bytes) throws IOException\n  ```\n发送文本消息或二进制消息。\n\n- **关闭连接**：\n```java\npublic void close()\n  ```\n关闭 WebSocket 连接。\n\n### WebSocketListener 接口\n\n`WebSocketListener` 是事件监听接口，定义了以下方法：\n\n- **onOpen**：\n```java\nvoid onOpen(WebSocketClient client, WebSocketResponse response)\n  ```\n连接成功时触发。\n\n- **onClose**：\n```java\nvoid onClose(WebSocketClient client, WebSocketResponse response, CloseReason reason)\n  ```\n连接关闭时触发。\n\n- **onError**：\n```java\nvoid onError(WebSocketClient client, WebSocketResponse response, Throwable throwable)\n  ```\n发生错误时触发。\n\n- **onMessage**：\n```java\nvoid onMessage(WebSocketClient client, String message)\nvoid onMessage(WebSocketClient client, byte[] message)\n  ```\n接收到文本消息或二进制消息时触发。\n\n### WebSocketOptions 类\n\n`WebSocketOptions` 提供了丰富的配置选项，包括：\n\n- **设置连接超时**：\n```java\npublic WebSocketOptions connectTimeout(int connectTimeout)\n  ```\n\n- **设置代理**：\n```java\npublic WebSocketOptions proxy(String host, int port, String username, String password)\n  ```\n\n- **设置读写缓冲区大小**：\n```java\npublic WebSocketOptions readBufferSize(int readBufferSize)\npublic WebSocketOptions writeBufferSize(int writeBufferSize)\n  ```\n\n- **启用调试模式**：\n```java\npublic WebSocketOptions debug(boolean debug)\n  ```\n\n---\n\n## 使用示例\n\n### 基本用法\n\n以下是一个简单的示例，展示了如何使用 Feat WebSocketClient 连接 WebSocket 服务器并处理消息：\n\n```java\nimport tech.smartboot.feat.core.client.WebSocketClient;\nimport tech.smartboot.feat.core.client.WebSocketListener;\nimport tech.smartboot.feat.core.client.WebSocketResponse;\n\npublic class WebSocketDemo {\n    public static void main(String[] args) {\n        WebSocketClient client = new WebSocketClient(\"ws://localhost:8080/ws\");\n        client.options().debug(true); // 开启调试模式\n\n        client.connect(new WebSocketListener() {\n            @Override\n            public void onOpen(WebSocketClient client, WebSocketResponse response) {\n                System.out.println(\"WebSocket 连接成功\");\n                try {\n                    client.sendMessage(\"Hello Feat WebSocket\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            @Override\n            public void onMessage(WebSocketClient client, String message) {\n                System.out.println(\"接收到消息：\" + message);\n            }\n\n            @Override\n            public void onClose(WebSocketClient client, WebSocketResponse response, CloseReason reason) {\n                System.out.println(\"WebSocket 连接关闭，关闭原因：\" + reason);\n            }\n\n            @Override\n            public void onError(WebSocketClient client, WebSocketResponse response, Throwable throwable) {\n                System.out.println(\"发生错误：\" + throwable.getMessage());\n            }\n        });\n    }\n}\n```\n\n### 高级配置\n\n如果需要自定义连接参数，可以通过 `WebSocketOptions` 进行配置：\n\n```java\nWebSocketClient client = new WebSocketClient(\"wss://example.com/ws\");\nWebSocketOptions options = client.options();\noptions.connectTimeout(5000) // 设置连接超时时间为 5 秒\n       .readBufferSize(8192) // 设置读缓冲区大小为 8 KB\n       .proxy(\"proxy.example.com\", 8080, \"user\", \"password\") // 设置代理服务器\n       .debug(true); // 开启调试模式\n\nclient.connect(listener);\n```\n\n---\n\n## 性能与扩展性\n\n### 高性能\n\nFeat WebSocketClient 基于 Feat 框架的高性能网络通信能力，能够支持大规模的并发连接和高频率的消息传输。通过合理配置读写缓冲区大小和线程池，可以进一步提升性能。\n\n### 灵活性\n\nFeat WebSocketClient 支持自定义 SSL/TLS 配置，适用于需要安全通信的场景。同时，通过 `WebSocketListener` 接口，开发者可以灵活地定义消息处理逻辑。\n\n### 线程安全\n\nFeat WebSocketClient 的设计充分考虑了线程安全问题，保证在高并发场景下的稳定性。\n\n---\n\n## 总结\n\nFeat WebSocketClient 是一款功能丰富、性能优越的 WebSocket 客户端实现，能够满足大多数实时通信场景的需求。通过简单的 API 和灵活的配置选项，开发者可以快速构建高效的 WebSocket 应用。\n\n如果你正在寻找一款高性能、易用的 WebSocket 客户端，Feat WebSocketClient 是一个值得考虑的选择。","src/content/docs/client/ws_client.mdx","7cb385c748bcfa8e","guides/about",{"id":185,"data":187,"body":192,"filePath":193,"digest":194,"deferredRender":16},{"title":188,"description":134,"editUrl":16,"head":189,"template":18,"sidebar":190,"pagefind":16,"draft":20},"Feat 介绍",[],{"order":59,"hidden":20,"attrs":191},{},"import architecture from './img/architecture.svg';\n\nFeat 是一个高性能、低资源消耗的 Java Web 服务开发框架，类似 Vert.x 和 Spring Boot。\n\n核心特性：\n- 高性能异步通信，轻松应对高并发\n- 支持 HTTP/1.0、HTTP/1.1、HTTP/2、WebSocket、SSE\n- 内置静态资源服务器，支持 HTTPS\n- 灵活插件与配置，适合企业级复杂应用\n\n\u003Cimg src={architecture.src} alt=\"Feat 框架架构图\" width=\"800\" height=\"400\" />\n\n## Feat 的开源故事\n\nFeat 诞生于 2024年12月21日，这是一个承载着六年开源经验的全新项目。它的前身是广受好评的开源框架 smart-http，在社区中积累了丰富的实践经验和技术沉淀。\n\n在 smart-http 达到相对稳定和成熟的阶段后，我们做出了一个战略性的决定：将项目交由社区维护，同时启动全新的 Feat 项目。这个决定让我们能够在保持 smart-http 稳定服务现有用户的同时，探索更多创新的可能性。\n\n选择创建 Feat 的核心原因，是希望在保持高性能的基础上，能够更自由地实践一些前瞻性的技术理念。这些想法在原有的框架中可能难以实现，但在 Feat 中将得到充分的施展空间。\n\nFeat 继承了 smart-http 的优秀基因，同时也带来了全新的技术视角和更多可能性。我们相信，Feat 不仅能够满足现代企业级应用的需求，还将在性能优化、资源利用等方面带来更多突破性的创新。\n\n## 为什么需要 Feat？\n\n我们希望基于 Feat 开发的 Web 服务可以：\n\n- **高效性能**：在运行速度上更高效一些，改变大家对于 Java 服务性能差的观念\n- **资源节省**：在资源开销上更节省一些，改变大家对于 Java 服务内存高的观念\n- **开发友好**：在开发体验上更友好一些，改变大家对于 Java 服务设计臃肿的观念\n\n## 如何正确使用 Feat\n\nFeat 采用了 AGPL 协议，在遵循该开源协议的前提下，你可以自由地使用 Feat 开发 Web 服务。\n\n倘若你的应用场景无法遵循开源规约，需联系我们获得 [Feat 的商业授权](/feat/auth/) 方可使用。\n\n以下流程图展示了 Feat 框架的不同授权使用方式：\n\n![](./img/license_flow.svg)","src/content/docs/guides/about.mdx","e18b864a663008a2","guides/deployment",{"id":195,"data":197,"body":203,"filePath":204,"digest":205,"deferredRender":16},{"title":198,"description":199,"editUrl":16,"head":200,"template":18,"sidebar":201,"pagefind":16,"draft":20},"应用构建","从打包到部署的最佳实践",[],{"order":137,"hidden":20,"attrs":202},{},"import {Aside} from '@astrojs/starlight/components';\nimport CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n\nFeat 应用可以通过 Maven 的 `maven-shade-plugin` 插件打包成一个包含所有依赖的可执行 jar 包（也称为 fat jar）。\n\n在 `pom.xml` 中添加以下配置：\n\n```xml title=\"pom.xml\"\n\u003Cbuild>\n    \u003Cplugins>\n        \u003Cplugin>\n            \u003CgroupId>org.apache.maven.plugins\u003C/groupId>\n            \u003CartifactId>maven-shade-plugin\u003C/artifactId>\n            \u003Cversion>3.5.0\u003C/version>\n            \u003Cexecutions>\n                \u003Cexecution>\n                    \u003Cphase>package\u003C/phase>\n                    \u003Cgoals>\n                        \u003Cgoal>shade\u003C/goal>\n                    \u003C/goals>\n                    \u003Cconfiguration>\n                        \u003Ctransformers>\n                            \u003Ctransformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                \u003CmainClass>your.package.MainClass\u003C/mainClass>\n                            \u003C/transformer>\n                        \u003C/transformers>\n                    \u003C/configuration>\n                \u003C/execution>\n            \u003C/executions>\n        \u003C/plugin>\n    \u003C/plugins>\n\u003C/build>\n```\n\n\u003CAside>\n    请将 `your.package.MainClass` 替换为您的主类的完整类名。\n\u003C/Aside>\n\n执行以下命令进行打包：\n\n```bash\nmvn clean package\n```","src/content/docs/guides/deployment.mdx","242a8c752ca2d508","server/https",{"id":206,"data":208,"body":214,"filePath":215,"digest":216,"deferredRender":16},{"title":209,"description":210,"editUrl":16,"head":211,"template":18,"sidebar":212,"pagefind":16,"draft":20},"Https 安全服务","Feat Https",[],{"order":158,"hidden":20,"attrs":213},{},"import https_1 from './img/https_1.png';\nimport CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n出于安全服务需要，生产环境通常使用 Https 协议，Feat 也提供了相应的能力。\n\n下文演示所使用的证书是通过 [mkcert](https://github.com/FiloSottile/mkcert) 生成的自签名证书。\n\n## 生成 PEM 证书\n执行以下命令生成证书：\n```shell\nmkcert example.com \"*.example.com\" example.test localhost 127.0.0.1 ::1\n```\n如果控制台出现以下提示信息，则表示证书生成成功。\n```shell\nCreated a new certificate valid for the following names 📜\n - \"example.com\"\n - \"*.example.com\"\n - \"example.test\"\n - \"localhost\"\n - \"127.0.0.1\"\n - \"::1\"\n\nReminder: X.509 wildcards only go one level deep, so this won't match a.b.example.com ℹ️\n\nThe certificate is at \"./example.com+5.pem\" and the key at \"./example.com+5-key.pem\" ✅\n\nIt will expire on 30 April 2027\n```\n## 启动Https服务\n将证书文件 `example.com+5.pem` 和 `example.com+5-key.pem` 拷贝到项目的 `src/main/resources` 目录下。\n\n使用 smart-socket 提供的 SslPlugin 插件启动 Https 服务。\n```java title=\"HttpsPemDemo.java\" \"new SslPlugin(new PemServerSSLContextFactory(certPem, keyPem))\"\npublic class HttpsPemDemo {\n    public static void main(String[] args) throws Exception {\n        InputStream certPem = HttpsPemDemo.class.getClassLoader().getResourceAsStream(\"example.org.pem\");\n        InputStream keyPem = HttpsPemDemo.class.getClassLoader().getResourceAsStream(\"example.org-key.pem\");\n        SslPlugin sslPlugin = new SslPlugin(new PemServerSSLContextFactory(certPem, keyPem));\n        Feat.httpServer(opt -> opt.addPlugin(sslPlugin)).httpHandler(req -> {\n            req.getResponse().write(\"Hello Feat Https\");\n        }).listen();\n    }\n}\n```\n打开浏览器，访问：https://localhost:8080 ，若页面展示如下，说明 Https 服务启动成功。\n\u003Cimg src={https_1.src} alt=\"hello world\" width=\"60%\" className=\"shadow\"/>\n\n\n## SSLEngine 传递\nHttpRequest 中提供了 `getSslEngine()` 方法，用于获取 SSLEngine。\n\n但是，SSLEngine 是在底层的网络通信层创建的，应用层无法感知底层是否使用了 SSL 协议。\n所以，默认情况下调用 `getSslEngine()` 方法获取到的 SSLEngine 为 null。\n\n若需要获取 SSLEngine，必须在 SslPlugin 中配置： **Consumer\\\u003CSSLEngine\\>**，\n将 `SSLEngine` 注入到 ThreadLocal 中以供应用层获取。\n```java title=HttpsSSLEngineDemo.java {6,7}\npublic class HttpsSSLEngineDemo {\n    public static void main(String[] args) throws Exception {\n        InputStream certPem = HttpsSSLEngineDemo.class.getClassLoader().getResourceAsStream(\"example.com+5.pem\");\n        InputStream keyPem = HttpsSSLEngineDemo.class.getClassLoader().getResourceAsStream(\"example.com+5-key.pem\");\n        SslPlugin sslPlugin = new SslPlugin(new PemServerSSLContextFactory(certPem, keyPem), (Consumer\u003CSSLEngine>) sslEngine -> {\n            sslEngine.setUseClientMode(false);\n            HttpRequest.SSL_ENGINE_THREAD_LOCAL.set(sslEngine);\n        });\n        Feat.httpServer(opt -> opt.addPlugin(sslPlugin)).httpHandler(req -> {\n            SSLEngine engine = req.getSslEngine();\n            if (engine == null) {\n                req.getResponse().write(\"engine is null\");\n            } else {\n                req.getResponse().write(\"engine=\" + engine);\n            }\n        }).listen();\n    }\n}\n```\nTCP 连接建立成功后，应用层`Endpoint.java`会在第一时间获取 `SSLEngine`。\n```java title=Endpoint.java {4-6}\nprotected Endpoint(AioSession aioSession, ServerOptions options) {\n    this.aioSession = aioSession;\n    this.options = options;\n    this.sslEngine = HttpRequest.SSL_ENGINE_THREAD_LOCAL.get();\n    if (sslEngine != null) {\n        HttpRequest.SSL_ENGINE_THREAD_LOCAL.remove();\n    }\n}\n```","src/content/docs/server/https.mdx","09c0f011b66de9ce","server/file_server",{"id":217,"data":219,"body":226,"filePath":227,"digest":228,"deferredRender":16},{"title":220,"description":221,"editUrl":16,"head":222,"template":18,"sidebar":223,"pagefind":16,"draft":20},"静态服务","Feat Static Service",[],{"order":224,"hidden":20,"attrs":225},7,{},"import file_server_1 from './img/file_server_1.png';\nimport file_server_2 from './img/file_server_2.png';\nimport {Steps} from \"@astrojs/starlight/components\";\n\nFeat框架内置了一个高性能的静态文件服务模块（FileServer），它可以作为Nginx的替代方案，用于托管静态资源。\n\n本文将详细介绍如何使用FileServer模块，包括基本用法、功能特性以及高级配置。\n\n## 概述\n\nFileServer模块是一个轻量级的静态资源服务器，支持以下功能：\n- 静态文件托管\n- 自动目录索引（可选）\n- 文件缓存\n- 断点续传\n- 支持大文件传输\n- 高性能IO处理\n\n通过FileServer模块，开发者可以快速搭建一个高效的静态资源服务器，适用于以下场景：\n- 托管网站静态资源（HTML、CSS、JavaScript等）\n- 提供文件下载服务\n- 替代Nginx作为静态资源服务器\n\n### 工作原理\n\n\n基本用法：\n```java \"baseDir(\\\"./\\\")\" \"fileServer\"\npublic class FileServerDemo {\n    public static void main(String[] args) {\n        Feat.fileServer(opts -> opts.baseDir(\"./\")).listen();\n    }\n}\n```\n\n## 参数说明\n\n### baseDir\n**类型:** `String`\n\n**默认值:** `./`\n\n静态资源文件的存放目录，该参数为 **必填项**。\n\n示例：\n\u003CSteps>\n    1. 在任意目录下创建一个 html 文件，\n        假设：\n        - Linux：/root/static/\n        - Windows: C:/static/\n        - Mac: /Users/xxx/static/\n        ```html title=\"index.html\"\n        \u003Chtml lang=\"\">\n            \u003Chead>\n                \u003Ctitle>Feat\u003C/title>\n            \u003C/head>\n            \u003Cbody>\n                \u003Ch1>Hello Feat\u003C/h1>\n                \u003Cp>File Server\u003C/p>\n            \u003C/body>\n        \u003C/html>\n        ```\n    2. 以 Linux 环境为例，实现代码如下：\n\n        ```java \"baseDir\"\n        public class FileServerDemo {\n            public static void main(String[] args) {\n                Feat.fileServer(opts -> opts.baseDir(\"/root/static/\")).listen();\n            }\n        }\n        ```\n    3. 运行程序并打开浏览器，访问：`http://localhost:8080`，效果如下：\n        \u003Cimg src={file_server_1.src} alt=\"hello world\" width=\"60%\" className=\"shadow\"/>\n\u003C/Steps>\n\n### autoIndex\n**类型:** `boolean`\n\n**默认值:** `false`\n\n若设置为：true，则允许以目录列表的形式展现。\n\n示例：\n\u003CSteps>\n    1. 运行以下程序：\n        ```java \"autoIndex(true)\"\n        public class FileServerDemo {\n            public static void main(String[] args) {\n                Feat.fileServer(opts -> opts.autoIndex(true)).listen();\n            }\n        }\n        ```\n    2. 打开浏览器，访问：`http://localhost:8080`，效果如下：\n        \u003Cimg src={file_server_2.src} alt=\"hello world\" width=\"40%\" className=\"shadow\"/>\n\u003C/Steps>","src/content/docs/server/file_server.mdx","282c902f81213e39","guides/version_history",{"id":229,"data":231,"body":236,"filePath":237,"digest":238,"deferredRender":16},{"title":232,"description":134,"editUrl":16,"head":233,"template":18,"sidebar":234,"pagefind":16,"draft":20},"版本历史",[],{"order":158,"hidden":20,"attrs":235},{},"import { Image } from '@astrojs/starlight/components';\n\n## v1.2.0 (2025-07-24)\n\n### 版本特性\n- **Feat Core：**\n    - 优化 HttpClient 实现，并修复已知 bug\n    - 启用SSE时默认禁用 chunked 响应header\n    - 扩充 ByteTree 初始化缓存值，提升服务性能。\n    - 修复 Runlogger 未实现日志级别判定的问题。\n    - 修复关闭进程时可能触发的 RunLogger 空指针问题。\n    - 版本号的定义从 `ServerOptions.java` 迁移至 `Feat.java`。\n- **Feat AI：**\n    - 新增 MCP 规范实现\n- **Feat Cloud**\n  - 新增`@HttpClient`注解，用于发起 HTTP 请求。\n  - 支持响应结果为 bool 值的 HTTP 接口服务。\n  - 预定义高频使用的byte数组，节省 APT 编译产生的常量bytes.\n  - @Controller 增加配置项：gzip、gzipThreshold，用于配置gzip响应策略。\n  - 新增基于注解的 MCP Server 开发能力。\n  - 重构 AOT 代码，提升扩展性。\n### 升级指南\n无\n### 兼容性说明\n无\n\n---\n\n## v1.1.0 (2025-06-13)\n\n### 版本特性\n\n- **Feat Core：**\n    - 限制单进程内 Feat Banner 最多输出一次。\n    - **`Router`** 支持定义相同 URL、不同 HTTP Method 的接口服务，提升 API 设计的灵活性。\n    - RunLogger 自动感应日志级别变化，支持动态调整日志级别。\n    - 日志级别环境变量由 `smarthttp.log.level` 调整为 `feat.log.level` 。\n    - 将 DateUtils、GzipUtils、HttpUtils、NumberUtils、StringUtils、CollectionUtils、Constant、SHA1、WebSocketUtil 等工具类能力统一汇集至 `FeatUtils` 中，简化使用成本。\n    - ByteTree 不再支持匹配期间动态 addNode，保障内存使用稳定性。\n    - 升级 smart-socket 至 1.5.69。\n- **Feat Cloud**\n  - 新增 `feat.yaml`/`feat.yml` 配置文件解析，并通过`@Value`注入 Bean 或 Controller中。(类似 Spring 的 `application.yaml`)\n  - 支持运行时动态调整指定 `loggerName` 的日志级别，便于灵活监控与调试。\n  - ApplicationContext 新增 getOptions 方法用于获 Feat Cloud 配置。\n  - Annotation Processor 重构，简化代码复杂度，提升扩展性。\n  - 编译器自动将非统配 URI 注册至 ByteTree，提升解析性能。\n\n---\n\n### 升级指南\n\n**pom升级**\n\ntech.smartboot.feat:\n    - feat-core：`1.0.0` => `1.1.0`\n    - feat-cloud-starter：`1.0.0` => `1.1.0`\n    - feat-ai：`1.0.0` => `1.1.0`\n\n**代码升级**\n\n参见下述**兼容性说明**\n\n----\n### 兼容性说明\n- CloudOptions@addExternalBean 方法重命名为 registerBean，用于注册外部 Bean。\n- 已废弃：DateUtils、GzipUtils、HttpUtils、NumberUtils、StringUtils、CollectionUtils、Constant、SHA1、WebSocketUtil\n\n---\n## v1.0.0 (2025-05-24)\n\nFeat v1.0.0 是首个正式发布版本，提供了完整的企业级 Web 服务开发框架功能。\n\n### 版本特性\n作为一款高性能 Java Web 服务框架，Feat 具备以下核心能力：\n\n**卓越的性能表现**\n- 基于智能异步通信框架，轻松应对高并发场景\n- 极低的资源消耗，适合容器化部署\n- 快速启动（&lt;1秒），适合 serverless 场景\n- 编译期静态分析，提升运行性能\n\n**全面的协议支持**\n\n- 支持 HTTP/1.0、HTTP/1.1、HTTP/2 协议\n- 内置 WebSocket 实现，便于开发实时应用\n- 支持 SSE（Server-Sent Events）\n- 完整的 HTTPS 支持（PEM 证书）\n\n**企业级功能**\n- 内置高性能静态资源服务器\n- 灵活的路由组件，轻松实现 RESTful API\n- 简洁的 API 设计，提高开发效率\n- 插件化架构，满足不同业务需求\n\n**轻量级设计**\n- 核心框架轻量化，无过多依赖\n- 简单易用的 API，降低学习成本\n- 类似于 Vert.x 的编程模型，但更加简洁\n\n**企业级解决方案**\n- Feat Cloud 企业版提供类似 Spring Boot 的开发体验\n- 适合构建复杂的企业级应用\n- 支持 AI 应用开发（Feat AI 模块）\n\n### 升级指南\n无\n### 兼容性说明\n无","src/content/docs/guides/version_history.mdx","d5e78688d268155d","server/async",{"id":239,"data":241,"body":247,"filePath":248,"digest":249,"deferredRender":16},{"title":242,"description":243,"editUrl":16,"head":244,"template":18,"sidebar":245,"pagefind":16,"draft":20},"异步响应","Feat HTTP请求异步处理教程",[],{"order":158,"hidden":20,"attrs":246},{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n\n在处理HTTP请求时，有时需要执行一些耗时的操作，如数据库查询、远程API调用或复杂计算。这些操作如果在主线程中同步执行，会阻塞服务器处理其他请求，降低系统的吞吐量和响应能力。\n\nFeat框架提供了简单高效的异步处理机制，让您能够轻松实现非阻塞的HTTP请求处理。\n\n## 异步处理原理\n\nFeat框架的异步处理机制基于Java的`CompletableFuture`，它允许您将请求处理逻辑放在独立的线程中执行，而不会阻塞HTTP服务器的主线程。\n\n`HttpHandler`接口提供了两个`handle`方法：\n\n```java\n// 同步处理方法\nvoid handle(HttpRequest request) throws Throwable;\n\n// 异步处理方法\ndefault void handle(HttpRequest request, CompletableFuture\u003CObject> completableFuture) throws Throwable {\n    try {\n        handle(request);\n    } finally {\n        completableFuture.complete(null);\n    }\n}\n```\n\n默认情况下，异步处理方法会调用同步处理方法，并在处理完成后自动完成`CompletableFuture`。但您可以覆盖这个默认实现，实现真正的异步处理。\n\n## 实现异步处理\n\n要实现异步处理，您需要：\n\n1. 覆盖`handle(HttpRequest request, CompletableFuture\u003CObject> completableFuture)`方法\n2. 在单独的线程中执行耗时操作\n3. 操作完成后手动调用`completableFuture.complete(result)`\n\n### 示例代码\n\n以下是一个简单的异步处理示例：\n\n```java\nimport tech.smartboot.feat.core.server.HttpHandler;\nimport tech.smartboot.feat.core.server.HttpRequest;\nimport tech.smartboot.feat.core.server.HttpServer;\n\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class AsyncHttpDemo {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n        HttpServer bootstrap = new HttpServer();\n        bootstrap.httpHandler(new HttpHandler() {\n\n            @Override\n            public void handle(HttpRequest request, CompletableFuture\u003CObject> future) throws IOException {\n                // 将请求处理逻辑放在独立的线程池中执行\n                executorService.execute(() -> {\n                    try {\n                        // 模拟耗时操作\n                        Thread.sleep(1000);\n                        // 处理请求并写入响应\n                        request.getResponse().write((\"\u003Cbr/>\" + new Date() + \" currentThread:\" + Thread.currentThread()).getBytes());\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    // 操作完成后，手动完成CompletableFuture\n                    future.complete(this);\n                });\n            }\n\n            @Override\n            public void handle(HttpRequest request) throws Throwable {\n                // 这个方法在异步模式下不会被调用\n            }\n        });\n        bootstrap.options().debug(true);\n        bootstrap.listen(8080);\n    }\n}\n```\n\n## 异步处理的优势\n\n1. **提高吞吐量**：主线程不会被阻塞，可以继续处理其他请求\n2. **更好的资源利用**：可以根据系统资源情况调整线程池大小\n3. **更好的用户体验**：服务器可以处理更多并发请求，减少用户等待时间\n4. **灵活的异常处理**：可以在异步线程中捕获异常，并通过`completableFuture.completeExceptionally(throwable)`传递异常\n\n\n通过Feat框架的异步处理机制，您可以轻松构建高性能、高并发的Web应用，充分利用系统资源，提供更好的用户体验。","src/content/docs/server/async.mdx","80492309b38ebf1e","server/serveroptions",{"id":250,"data":252,"body":258,"filePath":259,"digest":260,"deferredRender":16},{"title":253,"description":254,"editUrl":16,"head":255,"template":18,"sidebar":256,"pagefind":16,"draft":20},"ServerOptions 配置","Feat HTTP 服务器配置选项指南",[],{"order":93,"hidden":20,"attrs":257},{},"# ServerOptions 配置详解\n\nFeat HTTP 服务器配置类，用于配置服务器的各项参数，包括基础配置、性能调优、安全设置和调试功能等。\n\n## 基础配置\n\n### bannerEnabled\n**类型:** `boolean` **默认值:** `true`\n\n是否在启动时显示 Feat HTTP 服务器的版本信息。\n\n```java\noptions.bannerEnabled(false);\n```\n\n**使用场景：** 生产环境隐藏版本信息、保持控制台输出简洁\n\n### idleTimeout\n**类型:** `long` **默认值:** `60000`（毫秒）\n\n设置连接闲置超时时间。当客户端连接在指定时间内没有数据交互时，服务器将关闭该连接。\n\n```java\noptions.setIdleTimeout(120000); // 2分钟\n```\n\n**使用场景：** 防止空闲连接占用资源、优化连接管理、长连接超时控制\n\n### shutdownHook\n**类型:** `Runnable` **默认值:** `null`\n\n设置服务器关闭钩子。当服务器关闭时，会执行该钩子函数。\n\n```java\noptions.shutdownHook(() -> {\n    System.out.println(\"服务器关闭，执行资源清理...\");\n    // 执行资源清理、状态保存等操作\n});\n```\n\n**使用场景：** 资源清理、状态保存、关闭通知、优雅停机\n\n## 性能调优\n\n### threadNum\n**类型:** `int` **默认值:** `Math.max(Runtime.getRuntime().availableProcessors(), 2)`\n\n设置 HTTP 服务器的工作线程数。\n\n```java\noptions.threadNum(8);\n```\n\n**最佳实践：**\n- IO 密集型应用：CPU 核数的 2-4 倍\n- CPU 密集型应用：CPU 核数的 1-2 倍\n\n### readBufferSize\n**类型:** `int` **默认值:** `8 * 1024`（8KB）\n\n设置读缓冲区大小。用于存储客户端发送的 HTTP 请求数据。\n\n```java\noptions.readBufferSize(16 * 1024); // 16KB\n```\n\n**最佳实践：** 缓冲区至少要能容纳一个完整的 URL 或 Header 值，文件上传场景适当增加\n\n### writeBufferSize\n**类型:** `int` **默认值:** `8 * 1024`（8KB）\n\n设置写缓冲区大小。用于存储发送给客户端的 HTTP 响应数据。\n\n```java\noptions.writeBufferSize(16 * 1024); // 16KB\n```\n\n**最佳实践：** 响应大文件时适当增加，注意内存资源平衡\n\n### lowMemory\n**类型:** `boolean` **默认值:** `false`\n\n是否启用低内存模式。在资源受限环境中可减少内存占用。\n\n```java\noptions.setLowMemory(true);\n```\n\n**使用场景：** 嵌入式设备、容器化部署、资源受限环境\n\n### group\n**类型:** `AsynchronousChannelGroup` **默认值:** `null`\n\n设置异步通道组，用于管理异步 IO 操作的线程组。\n\n```java\nAsynchronousChannelGroup channelGroup = AsynchronousChannelGroup.withFixedThreadPool(\n    4, Executors.defaultThreadFactory());\n    \noptions.group(channelGroup);\n```\n\n**使用场景：** 自定义异步 IO 线程池、多服务共享线程池资源\n\n## 安全设置\n\n### maxRequestSize\n**类型:** `long` **默认值:** `Integer.MAX_VALUE`\n\n设置允许的最大请求报文大小。防止恶意大请求攻击。\n\n```java\noptions.setMaxRequestSize(10 * 1024 * 1024); // 10MB\n```\n\n**最佳实践：** 根据业务需求设置合理限制，文件上传场景适当调大\n\n### headerLimiter\n**类型:** `int` **默认值:** `100`\n\n设置请求头的最大数量限制。超过此限制的请求头将被忽略。\n\n```java\noptions.headerLimiter(50);\n```\n\n**使用场景：** 防止 HTTP 头部攻击、限制异常请求、保护服务器资源\n\n### secure\n**类型:** `boolean` **默认值:** `false`\n\n是否启用加密通信（HTTPS）。添加 SslPlugin 插件时自动设置为 true。\n\n```java\n// 添加 SSL 插件后，secure 会自动设置为 true\noptions.addPlugin(new SslPlugin\u003C>(\"keystore.jks\", \"password\", \"JKS\"));\n```\n\n**使用场景：** 保护敏感数据传输、提高服务安全性、满足合规要求\n\n### proxyProtocolSupport\n**类型:** `方法`\n\n启用代理协议支持。当服务器部署在代理后面时，可获取客户端真实 IP。\n\n```java\noptions.proxyProtocolSupport();\n```\n\n**使用场景：** 负载均衡环境、获取客户端真实 IP、与代理服务器集成\n\n## 调试功能\n\n### debug\n**类型:** `boolean` **默认值:** `false`\n\n是否开启调试模式。开启后会打印请求和响应的详细信息。\n\n```java\noptions.debug(true);\n```\n\n**使用场景：** 开发环境调试、排查通信问题、分析请求处理流程\n\n**注意：** 生产环境必须关闭，避免性能下降和信息泄露\n\n## 插件系统\n\n### addPlugin\n**类型:** `方法`\n\n添加服务器插件。扩展服务器功能，如 SSL 支持、代理协议支持、流量监控等。\n\n```java\n// 添加单个插件\noptions.addPlugin(new SslPlugin\u003C>(\"keystore.jks\", \"password\", \"JKS\"));\n    \n// 批量添加插件\nList\u003CPlugin\u003CHttpEndpoint>> pluginList = new ArrayList\u003C>();\npluginList.add(new SslPlugin\u003C>(\"keystore.jks\", \"password\", \"JKS\"));\npluginList.add(new CustomPlugin\u003C>());\noptions.addPlugin(pluginList);\n```\n\n**常用插件：** SslPlugin（HTTPS）、ProxyProtocolPlugin（代理协议）、StreamMonitorPlugin（流量监控）\n\n## 配置示例\n\n### 开发环境配置\n\n```java\nFeat.httpServer(options -> {\n    // 基础配置\n    options.serverName(\"dev-app-v1.0\");\n    options.bannerEnabled(true);\n    options.setIdleTimeout(300000); // 5分钟\n    \n    // 性能调优\n    options.threadNum(Runtime.getRuntime().availableProcessors() * 2);\n    options.readBufferSize(16 * 1024);\n    options.writeBufferSize(16 * 1024);\n    \n    // 安全设置\n    options.setMaxRequestSize(50 * 1024 * 1024); // 50MB\n    options.headerLimiter(100);\n    \n    // 调试功能\n    options.debug(true); // 开发环境启用调试\n})\n.listen(8080);\n```\n\n### 生产环境配置\n\n```java\nFeat.httpServer(options -> {\n    // 基础配置\n    options.serverName(\"prod-app\"); // 隐藏版本信息\n    options.bannerEnabled(false); // 关闭 banner\n    options.setIdleTimeout(60000); // 1分钟\n    \n    // 性能调优\n    options.threadNum(Runtime.getRuntime().availableProcessors() * 2);\n    options.readBufferSize(8 * 1024);\n    options.writeBufferSize(8 * 1024);\n    \n    // 安全设置\n    options.setMaxRequestSize(10 * 1024 * 1024); // 10MB\n    options.headerLimiter(50);\n    options.addPlugin(new SslPlugin\u003C>(\"/path/to/keystore.jks\", \"password\", \"JKS\"));\n    options.proxyProtocolSupport();\n    \n    // 调试功能\n    options.debug(false); // 禁用调试\n})\n.listen(443);\n```\n\n## 最佳实践\n\n### 性能优化\n- 根据应用特性和硬件资源合理设置线程数\n- 通过压测确定最优缓冲区大小\n- 生产环境关闭调试功能\n- 容器环境适当降低线程数和缓冲区大小\n\n### 安全防护\n- 设置合理的请求大小限制和请求头数量限制\n- 修改默认服务器名称，避免暴露版本信息\n- 生产环境禁用 banner 显示\n- 敏感数据传输启用 HTTPS\n\n### 环境差异化配置\n- 开发环境：启用调试功能，放宽资源限制\n- 测试环境：模拟生产配置，进行性能测试\n- 生产环境：关闭调试功能，加强安全限制","src/content/docs/server/serveroptions.mdx","f2a40fa7541c6f89","server/router",{"id":261,"data":263,"body":269,"filePath":270,"digest":271,"deferredRender":16},{"title":264,"description":265,"editUrl":16,"head":266,"template":18,"sidebar":267,"pagefind":16,"draft":20},"Router 路由组件","Feat Router是一个功能强大的HTTP请求分发器，支持多种路由匹配方式和高级功能",[],{"order":82,"hidden":20,"attrs":268},{},"Feat中的`Router`组件是一个功能强大的HTTP请求分发器，用于将HTTP请求分发到对应的处理程序（Handler）。它是基于`NodePath`树状结构实现的，支持多种路由匹配方式，包括精确匹配、通配符匹配、路径参数匹配等。同时提供了Session管理和请求拦截等高级功能。\n\n## 主要功能\n\n### 1. 基础功能\n\n- **路由匹配**：根据请求的URI将请求分发到对应的处理程序\n- **路径参数提取**：支持从路径中提取参数\n- **多种匹配方式**：支持精确匹配、通配符匹配（`*`）、路径参数匹配（`:param`）等\n- **默认路由**：未匹配到任何路由时，使用默认处理程序\n\n### 2. 高级功能\n\n- **Session管理**：提供完整的Session生命周期管理，支持创建、获取、更新和销毁Session\n- **请求拦截**：支持配置拦截器，实现请求的前置和后置处理\n- **灵活配置**：支持链式调用，简化路由配置\n\n## 路由匹配原理\n\n![Router原理图](./img/router.svg)\n\n### 1. 核心数据结构\n\n`Router`内部通过`NodePath`树状结构存储路由规则：\n\n- **根节点**：表示根路径`/`\n- **路径节点**：每个`NodePath`节点代表一个路径部分（如`/user`或`:id`）\n- **叶子节点**：存储具体的处理程序（RouterHandler）\n\n### 2. 匹配流程\n\n1. **解析请求URI**：将请求URI拆分为路径部分\n2. **树状匹配**：\n   - 从根节点开始，逐层匹配路径部分\n   - 优先进行精确匹配，其次是路径参数匹配，最后是通配符匹配\n3. **参数提取**：如果匹配到路径参数（如`:id`），将其提取到`Context`中\n4. **处理程序调用**：调用匹配到的处理程序，如未匹配则使用默认处理程序\n\n## Session管理\n\n### 1. Session配置\n![Session管理机制](./img/session.svg)\n```java\nRouter router = new Router();\nrouter.getSessionOptions()\n      .setMaxAge(1800); // 设置Session过期时间为30分钟\n```\n\n### 2. Session操作\n\n```java\nrouter.route(\"/session/demo\", ctx -> {\n    // 获取或创建Session\n    Session session = ctx.getSession();\n    \n    // 设置Session属性\n    session.setAttribute(\"userId\", \"12345\");\n    \n    // 获取Session属性\n    String userId = session.getAttribute(\"userId\");\n    \n    // 手动使Session失效\n    session.invalidate();\n});\n```\n\n## 拦截器使用\n\n![拦截器执行流程](./img/interceptor.svg)\n\n### 1. 创建拦截器\n\n```java\npublic class LogInterceptor implements Interceptor {\n    @Override\n    public void intercept(Context ctx, Chain chain) throws Throwable {\n        System.out.println(\"请求开始: \" + ctx.Request.getRequestURI());\n        try {\n            chain.proceed(ctx);\n        } finally {\n            System.out.println(\"请求结束: \" + ctx.Request.getRequestURI());\n        }\n    }\n}\n```\n\n### 2. 配置拦截器\n\n```java\nRouter router = new Router();\n// 为所有/api路径下的请求添加拦截器\nrouter.addInterceptor(\"/api/*\", new LogInterceptor());\n\n// 为多个路径添加拦截器\nList\u003CString> patterns = Arrays.asList(\"/user/*\", \"/order/*\");\nrouter.addInterceptors(patterns, new LogInterceptor());\n```\n\n## 路由配置示例\n\n### 1. 基础路由\n\n```java\nRouter router = new Router();\n\n// 精确匹配\nrouter.route(\"/user/info\", ctx -> {\n    ctx.Response.write(\"User info\");\n});\n\n// 路径参数匹配\nrouter.route(\"/user/:id\", ctx -> {\n    String id = ctx.pathParam(\"id\");\n    ctx.Response.write(\"User ID: \" + id);\n});\n\n// 通配符匹配\nrouter.route(\"/api/*\", ctx -> {\n    ctx.Response.write(\"API endpoint\");\n});\n```\n\n### 2. 默认路由\n\n```java\nRouter router = new Router(request -> {\n    request.getResponse()\n           .setHttpStatus(HttpStatus.NOT_FOUND)\n           .write(\"404 Not Found\");\n});\n```\n\n### 3. 深层路由示例\n\n```java\npublic class DeepRouterDemo {\n    public static void main(String[] args) {\n        Router router = new Router();\n\n        // 1. 精确匹配（最高优先级）\n        router.route(\"/api/v1/user/profile\", ctx -> {\n            ctx.Response.write(\"用户档案\");\n        });\n\n        // 2. 路径参数匹配（次高优先级）\n        router.route(\"/api/v1/user/:id/orders\", ctx -> {\n            String userId = ctx.pathParam(\"id\");\n            ctx.Response.write(\"用户\" + userId + \"的订单列表\");\n        });\n\n        // 3. 多路径参数匹配\n        router.route(\"/api/v1/user/:userId/orders/:orderId\", ctx -> {\n            String userId = ctx.pathParam(\"userId\");\n            String orderId = ctx.pathParam(\"orderId\");\n            ctx.Response.write(\"用户\" + userId + \"的订单\" + orderId + \"详情\");\n        });\n\n        // 4. 通配符匹配（最低优先级）\n        router.route(\"/api/v1/user/*\", ctx -> {\n            ctx.Response.write(\"用户相关API\");\n        });\n\n        // 5. 多层通配符匹配\n        router.route(\"/api/*/user/*/*\", ctx -> {\n            ctx.Response.write(\"通用用户API处理\");\n        });\n    }\n}\n```\n\n上述示例展示了深层路由的匹配优先级规则：\n1. 精确路径匹配：完全匹配URL路径，如`/api/v1/user/profile`\n2. 路径参数匹配：包含`:param`形式的参数，如`/api/v1/user/:id/orders`\n3. 通配符匹配：包含`*`的路径，如`/api/v1/user/*`或`/api/*/user/*/*`\n\n### 4. 完整示例\n\n```java\npublic class RouterDemo {\n    public static void main(String[] args) {\n        Router router = new Router();\n        \n        // 配置Session\n        router.getSessionOptions().setMaxAge(1800);\n        \n        // 添加拦截器\n        router.addInterceptor(\"/*\", new LogInterceptor());\n        \n        // 配置路由\n        router.route(\"/\", ctx -> {\n            Session session = ctx.getSession();\n            session.setAttribute(\"visitTime\", System.currentTimeMillis());\n            ctx.Response.write(\"Welcome!\");\n        });\n        \n        router.route(\"/user/:id\", ctx -> {\n            String id = ctx.pathParam(\"id\");\n            Session session = ctx.getSession(false); // 获取Session但不创建\n            if (session != null) {\n                Long visitTime = session.getAttribute(\"visitTime\");\n                ctx.Response.write(\"User \" + id + \", last visit: \" + visitTime);\n            } else {\n                ctx.Response.write(\"User \" + id);\n            }\n        });\n        \n        // 启动服务器\n        Feat.httpServer()\n            .httpHandler(router)\n            .listen();\n    }\n}\n```\n\n## 总结\n\nFeat中的`Router`组件不仅提供了强大的路由匹配功能，还集成了Session管理和请求拦截等高级特性。通过树状的路由匹配结构，实现了高效的请求分发。同时，其链式调用的API设计，使得路由配置更加简洁直观。开发者可以根据实际需求，灵活运用这些功能，构建功能丰富的Web应用。","src/content/docs/server/router.mdx","ddecfa0c6c1e4a4a","server/upgrade",{"id":272,"data":274,"body":281,"filePath":282,"digest":283,"deferredRender":16},{"title":275,"description":276,"editUrl":16,"head":277,"template":18,"sidebar":278,"pagefind":16,"draft":20},"协议升级","Feat upgrade",[],{"order":279,"hidden":20,"attrs":280},6,{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\n\n\u003CCheckAuthorize/>\n\n## WebSocket 升级\n\nFeat 框架支持通过 `request.upgrade(new WebSocketUpgrade())` 实现 HTTP 到 WebSocket 的协议升级。以下为服务端升级实现示例：\n\n```java\n// WebSocketDemo.java\npublic class WebSocketDemo {\n    public static void main(String[] args) {\n        Feat.httpServer().httpHandler(request -> {\n            request.upgrade(new WebSocketUpgrade() {\n                @Override\n                public void handleTextMessage(WebSocketRequest request, WebSocketResponse response, String message) {\n                    response.sendTextMessage(\"接受到客户端消息：\" + message);\n                }\n            });\n        }).listen();\n    }\n}\n```\n\n---\n\n## Upgrade Http2\n\nFeat 框架原生支持 HTTP/1.0、HTTP/1.1 和 HTTP/2.0，无需手动升级，框架会自动协商协议。若需自定义 HTTP/2 行为，可参考如下示例：\n\n```java title=Http2Demo.java\npublic class Http2Demo {\n    public static void main(String[] args) {\n        Feat.httpServer().httpHandler(request -> {\n            request.upgrade(new Http2Upgrade() {\n                @Override\n                public void handle(HttpRequest http2Request) {\n                    HttpResponse response = http2Request.response();\n                    response.setStatus(200);\n                    response.send(\"HTTP/2响应\");\n                }\n            });\n        }).listen();\n    }\n}\n```\n\n\n---\n\n## Upgrade SSE\n\nFeat 框架通过 `request.upgrade(new SSEUpgrade())` 实现 SSE 协议升级，支持服务端主动推送事件流。以下为服务端实现示例：\n\n```java\npublic class SSEDemo {\n    public static void main(String[] args) throws Exception {\n        Feat.httpServer(serverOptions -> serverOptions.debug(true)).httpHandler(req -> {\n            req.upgrade(new SSEUpgrade() {\n                public void onOpen(SseEmitter sseEmitter) {\n                    // 创建定时任务，每秒发送一条消息\n                    Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(() -> {\n                        try {\n                            sseEmitter.send(SseEmitter.event()\n                                .name(\"update\")  // 设置事件名称\n                                .id(String.valueOf(i++))  // 设置事件ID\n                                .data(\"hello world\"));  // 设置事件数据\n                        } catch (IOException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }, 1, 1, TimeUnit.SECONDS);\n                }\n            });\n        }).listen(8080);\n    }\n}\n```","src/content/docs/server/upgrade.mdx","32d5f820377494cd","appendix/benchmark",{"id":284,"data":286,"body":292,"filePath":293,"digest":294,"deferredRender":16},{"title":287,"description":288,"editUrl":16,"head":289,"template":18,"sidebar":290,"pagefind":16,"draft":20},"性能评测报告","Feat框架与Spring Boot、Vert.x的性能对比测试",[],{"hidden":20,"attrs":291},{},"import bench_hello_world_rps from './img/bench_hello_world_rps.png'\nimport bench_hello_world_avg from './img/bench_hello_world_avg.png'\nimport bench_json_rps from './img/bench_json_rps.png'\nimport bench_json_avg from './img/bench_json_avg.png'\nimport performance_comparison from './img/performance_comparison.svg'\n\n本报告比较了三个Java Web框架的性能：Feat、Vert.x和Spring Boot。测试使用Apache Benchmark (ab)工具，针对每个框架的Hello World和JSON响应接口进行了性能测试。\n\n测试参数：1,000,000个请求，并发数100，启用HTTP Keep-Alive。\n\n## 测试结论\n\u003Cimg src={performance_comparison.src} alt=\"性能对比图表\" width=\"80%\"/>\n根据测试结果，可以得出以下结论：\n- 在Hello World接口测试中，Feat框架表现最佳，每秒处理请求数最多。\n- 在JSON响应接口测试中，Feat框架表现最佳，每秒处理请求数最多。\n\n## 性能对比图表\n### Hello World接口测试\n\u003Cimg src={bench_hello_world_rps.src} alt=\"Hello World接口测试\" width=\"80%\"/>\n\u003Cimg src={bench_hello_world_avg.src} alt=\"Hello World接口测试\" width=\"80%\"/>\n\n\n### JSON响应接口测试\n\u003Cimg src={bench_json_rps.src} alt=\"JSON响应接口测试\" width=\"80%\"/>\n\u003Cimg src={bench_json_avg.src} alt=\"JSON响应接口测试\" width=\"80%\"/>\n\n## 详细测试数据\n\n\n| 测试类型 | 框架 | 每秒请求数 | 平均响应时间 (ms) | 错误率 (%) |\n|----------|------|------------|------------------|------------|\n| Hello World | Feat | 88241.10 | 0.01 | 0.00 |\n| Hello World | Spring Boot | 34406.30 | 0.03 | 0.00 |\n| Hello World | Vert.x | 87304.32 | 0.01 | 0.00 |\n| JSON响应 | Feat | 89489.21 | 0.01 | 0.00 |\n| JSON响应 | Spring Boot | 10645.22 | 0.09 | 0.00 |\n| JSON响应 | Vert.x | 84135.96 | 0.01 | 0.00 |","src/content/docs/appendix/benchmark.mdx","9967e23f35c61942","server/getstart",{"id":295,"data":297,"body":302,"filePath":303,"digest":304,"deferredRender":16},{"title":298,"description":134,"editUrl":16,"head":299,"template":18,"sidebar":300,"pagefind":16,"draft":20},"开始使用",[],{"order":59,"hidden":20,"attrs":301},{},"import {Aside, TabItem, Tabs} from '@astrojs/starlight/components';\nimport helloFeat from './img/1_2_hello_feat.png';\nimport helloWorld from './img/1_2_hello_world.png';\n\n在本章节中，您将学习如何开始使用 Feat 快速开发一个 Web 项目。\n\n开始之前，请确保已完成以下几项前置准备工作：\n\n- JDK 1.8 或更高版本\n- Maven 3.0 或更高版本\n- IDE（本教程示例基于 IntelliJ IDEA）\n- [curl](https://curl.se/) 或者 **浏览器** 用于 HTTP 请求测试。\n\n> **Feat Server 是一种原生编程模式，通常我们建议采用 [Feat Cloud](/feat/cloud/getstart/) 开展应用开发，以获得近似于 Springboot 的编程体验。**\n\n## 引入 Feat\n在您的 Maven 工程 pom.xml 文件中添加以下配置，即可完成 Feat 的引入：\n\n```xml title=\"pom.xml\"\n\u003Cdependency>\n    \u003CgroupId>tech.smartboot.feat\u003C/groupId>\n    \u003CartifactId>feat-core\u003C/artifactId>\n    \u003Cversion>${feat.version}\u003C/version>\n\u003C/dependency>\n```\n\u003CAside>\n    `${feat.version}` 需根据实际情况设置，建议使用[最新版本](https://central.sonatype.com/artifact/tech.smartboot.feat/feat-core)。\n\u003C/Aside>\n\n## 快速启动\n下面通过一个简单的示例，以检验 Feat 是否成功引入，并演示如何快速启动一个 Web 服务。\n```java title=\"HelloFeat.java\" {3}\npublic class HelloFeat {\n    public static void main(String[] args) {\n        Feat.httpServer().listen();\n    }\n}\n```\n\n启动上面的程序后，运行效果：\n\u003CTabs>\n    \u003CTabItem value=\"浏览器\" label=\"浏览器\">\n        \u003Cimg src={helloFeat.src} alt=\"hello world\" width=\"60%\" className=\"shadow\"/>\n    \u003C/TabItem>\n    \u003CTabItem value=\"curl\" label=\"curl\">\n        如果您使用的是 **curl** 命令行工具，可以执行以下命令进行测试：\n        ```shell {1}\n        curl -v http://localhost:8080\n        *   Trying 127.0.0.1:8080...\n        * Connected to localhost (127.0.0.1) port 8080 (#0)\n        > GET / HTTP/1.1\n        > Host: localhost:8080\n        > User-Agent: curl/7.77.0\n        > Accept: */*\n        >\n        * Mark bundle as not supporting multiuse\n        \u003C HTTP/1.1 200 OK\n        \u003C Server:feat\n        \u003C Date:Tue, 14 Jan 2025 00:00:00 GMT\n        \u003C Content-Type:text/html; charset=utf-8\n        \u003C Transfer-Encoding: chunked\n        \u003C\n        * Connection #0 to host localhost left intact\n        Hello Feat%\n        ```\n    \u003C/TabItem>\n\u003C/Tabs>\n\n🎉 **好了，我们的第一个 Web 服务就完成了。**\n\n\n\n## 编写自定义响应\n现在我们再来写一个自定义的响应的服务，并指定服务端端口为 8081。\n```java title=\"HelloWorld.java\" {3,4,5}\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Feat.httpServer()\n                .httpHandler(request -> request.getResponse().write(\"Hello World\"))\n                .listen(8081);\n    }\n}\n```\n运行效果：\n\u003CTabs>\n    \u003CTabItem value=\"浏览器\" label=\"浏览器\">\n        \u003Cimg src={helloWorld.src} alt=\"hello world\" width=\"60%\" className=\"shadow\"/>\n    \u003C/TabItem>\n    \u003CTabItem value=\"curl\" label=\"curl\">\n        ```shell {1}\n        curl -v http://localhost:8081\n        *   Trying 127.0.0.1:8081...\n        * Connected to localhost (127.0.0.1) port 8081 (#0)\n        > GET / HTTP/1.1\n        > Host: localhost:8081\n        > User-Agent: curl/7.77.0\n        > Accept: */*\n        >\n        * Mark bundle as not supporting multiuse\n        \u003C HTTP/1.1 200 OK\n        \u003C Server:feat\n        \u003C Date:Tue, 14 Jan 2025 00:00:00 GMT\n        \u003C Content-Type:text/html; charset=utf-8\n        \u003C Transfer-Encoding: chunked\n        \u003C\n        * Connection #0 to host localhost left intact\n        Hello World%\n        ```\n    \u003C/TabItem>\n\u003C/Tabs>\n\n## 建议&反馈\n希望这篇教程能够帮助您对 Feat 有一个初步的了解。\n如果您在使用过程中遇到任何问题，欢迎随时向我们提交 [Issue](https://gitee.com/smartboot/feat/issues/new/)。","src/content/docs/server/getstart.mdx","257a6cec6c31c1f5","cloud/getstart",{"id":305,"data":307,"body":311,"filePath":312,"digest":313,"deferredRender":16},{"title":298,"description":134,"editUrl":16,"head":308,"template":18,"sidebar":309,"pagefind":16,"draft":20},[],{"order":59,"hidden":20,"attrs":310},{},"import idea_setting from './img/idea_setting.png';\nimport demo from './img/demo.png';\nimport lifecycle from './img/lifecycle.svg';\nimport {Aside, TabItem, Tabs} from \"@astrojs/starlight/components\";\n\nFeat Cloud 提供了一种面向企业级应用开发的解决方案，它的定位有点像 SpringBoot。\n\n**设计方面**：Feat Cloud 尽最大可能保留了 SpringBoot 的使用习惯，以此降低开发者的学习成本。\n\n**技术方面**：Feat Cloud 在编译期对代码进行静态分析，最大化提升服务运行性能，降低资源消耗。\n\n## 准备工作\n\n### 引入 Maven 依赖\n创建一个 Maven 项目，在 `pom.xml` 文件中添加以下依赖：\n```xml title=pom.xml\n\u003Cdependency>\n    \u003CgroupId>tech.smartboot.feat\u003C/groupId>\n    \u003CartifactId>feat-cloud-starter\u003C/artifactId>\n    \u003Cversion>${feat.version}\u003C/version>\n\u003C/dependency>\n```\n\u003CAside>\n    **$\\{feat.version}**\n    需根据实际情况设置，建议使用[最新版本](https://central.sonatype.com/artifact/tech.smartboot.feat/feat-cloud-starter)。\n\u003C/Aside>\n\n### 配置 IDEA\n调整 IDEA 编译配置，以启用 Feat Cloud 的静态优化功能，**否则请求将无法正常路由**。\n\n设置路径为：`Preferences -> Build, Execution, Deployment -> Build Tools -> Maven -> Runner`，\n勾选`Delegate IDE build/run actions to Maven` 并点击 `OK` 保存配置。\n\n\u003Cimg src={idea_setting.src} alt=\"hello world\" width=\"60%\" className=\"shadow\"/>\n\n## 快速启动\n在 Maven 工程中创建一个 `FeatCloudDemo.java` 文件，添加以下代码：\n``` java title=FeatCloudDemo.java\n@Controller\npublic class FeatCloudDemo {\n    @RequestMapping(\"/cloud\")\n    public String helloWorld() {\n        return \"hello Feat Cloud\";\n    }\n\n    public static void main(String[] args) {\n        Feat.cloudServer().listen();\n    }\n}\n```\n启动程序，打开浏览器访问 `http://localhost:8080/cloud`。\n\u003Cimg src={demo.src} alt=\"hello world\" width=\"60%\" className=\"shadow\"/>\n\n\n## 工作原理\n从上面的代码可以看出，Feat Cloud 是基于注解的方式进行服务开发的。\n通常来说，框架会在运行时解析注解并生成对应的服务。\n\n但是，Feat Cloud 却是在编译时对代码进行静态分析，生成对应的服务。\n其核心原理是**运用了 APT（Annotation Processing Tool）技术，并结合 ServiceLoader 实现了 0 反射的服务加载机制**。\n\n\n### 1. 静态转码\n以 FeatCloudDemo 为例，开发人员编写的源代码在编译时经过一次静态转码，生成了一个新的 java 文件 `FeatCloudDemoBeanAptLoader.java`。\n\u003CTabs>\n    \u003CTabItem label=\"源代码\">\n        ``` java title=FeatCloudDemo.java\n        @Controller\n        public class FeatCloudDemo {\n            @RequestMapping(\"/cloud\")\n            public String helloWorld() {\n                return \"hello Feat Cloud\";\n            }\n\n            public static void main(String[] args) {\n                Feat.cloudServer().listen();\n            }\n        }\n        ```\n    \u003C/TabItem>\n    \u003CTabItem label=\"静态转码\">\n        ```java title=FeatCloudDemoBeanAptLoader.java\n        public class FeatCloudDemoBeanAptLoader extends AbstractServiceLoader {\n            private FeatCloudDemo bean;\n\n            public void loadBean(ApplicationContext applicationContext) throws Throwable {\n                bean = new FeatCloudDemo();\n                applicationContext.addBean(\"featCloudDemo\", bean);\n            }\n\n            public void autowired(ApplicationContext applicationContext) {\n\n            }\n\n            public void router(Router router) {\n                router.route(\"/cloud\", req -> {\n                    String rst = bean.helloWorld();\n                    byte[] bytes = rst.getBytes(\"UTF-8\");\n                    req.getResponse().setContentLength(bytes.length);\n                    req.getResponse().write(bytes);\n                });\n            }\n\n            public void destroy() throws Throwable {\n            }\n\n            public void postConstruct(ApplicationContext applicationContext) throws Throwable {}\n            }\n        ```\n    \u003C/TabItem>\n\n\u003C/Tabs>\n\n可以从静态转码后的代码中看出，对于 bean 的实例化，是通过 `new` 关键字进行的，而不是通过反射。\n\n对于路由的配置，也是通过调用 Feat Server 中的 Router 方法进行的，也不是通过反射。\n\n因此，**Feat Cloud 可以在提供优雅的开发体验的同时，也极大地保留了 Feat Server 框架的性能优势。**\n\n----\n### 2. 服务载入\nController 在编译时完成转码后，下一步便是需要在程序启动后能够被正确加载，此处需要用到的技术便是 `java.util.ServiceLoader`。\n\nController 静态转码所生成的类文件默认实现了 `tech.smartboot.feat.cloud.service.CloudService` 接口，同时会自动生成一个 service 文件：\n\n**`META-INF/services/tech.smartboot.feat.cloud.service.CloudService`**\n\n当调用 ApplicationContext@start 方法时：\n1. 首先通过 **ServiceLoader.load(CloudService.class)** 加载所有实现了 **CloudService** 接口的类。并根据 `isIgnore` 规则过滤出有效的服务。\n2. 遍历所有服务，调用其 `loadBean` 方法，完成 bean 的实例化。\n3. 遍历所有服务，调用其 `autowired` 方法，完成各实例的依赖注入。\n4. 遍历所有服务，调用其 `postConstruct` 方法，完成各实例的初始化。\n5. 遍历所有服务，调用其 `router` 方法，完成 Controller 路由的配置。\n\n\u003CTabs>\n    \u003CTabItem label=\"ApplicationContext.java\">\n\n        ```java title=ApplicationContext.java \"ServiceLoader.load\" \"isIgnore(service)\" \"service.loadBean\" \"service.autowired\" \"service.postConstruct\" \"service.router\"\n        public class ApplicationContext {\n\n            ...\n\n            public void start() throws Throwable {\n                for (CloudService service : ServiceLoader.load(CloudService.class)) {\n                    if (isIgnore(service)) {\n                        continue;\n                    }\n                    services.add(service);\n                }\n                for (CloudService service : services) {\n                    service.loadBean(this);\n                }\n\n                for (CloudService service : services) {\n                    service.autowired(this);\n                }\n                for (CloudService service : services) {\n                    service.postConstruct(this);\n                }\n                for (CloudService service : services) {\n                    service.router(router);\n                }\n            }\n\n            ...\n        }\n        ```\n    \u003C/TabItem>\n    \u003CTabItem label=\"CloudService.java\">\n        ```java title=CloudService.java\n        public interface CloudService {\n            void loadBean(ApplicationContext context) throws Throwable;\n\n            void autowired(ApplicationContext context);\n\n            void postConstruct(ApplicationContext context) throws Throwable;\n\n            void destroy() throws Throwable;\n\n            void router(Router router);\n        }\n        ```\n    \u003C/TabItem>\n\u003C/Tabs>\n\n----\n\n### 3. 启动服务\n在这个步骤中，由于 `ApplicationContext@start` 中已经完成了所有服务的实例化、依赖注入、初始化、路由配置等工作，因此，最后一步便是将 Router 实例设置到 HttpServer 中，启动服务。\n\n```java title=Feat.java \"application.start();\" \"application.destroy();\" \"application::destroy\" \"application.getRouter()\"\npublic static HttpServer cloudServer(Consumer\u003CCloudOptions> options) {\n    CloudOptions opt = new CloudOptions();\n    options.accept(opt);\n    opt.serverName(\"feat-cloud\");\n    ApplicationContext application = new ApplicationContext(opt);\n    opt.getExternalBeans().forEach(application::addBean);\n    application.start();\n\n    HttpServer server = Feat.httpServer(opt);\n    ...\n    server.httpHandler(application.getRouter());\n    return server;\n}\n```\n----\n\n### 4. 生命周期\n在 Feat Cloud 中对于托管的实例的生命周期管理可分为：**创建** -> **属性填充** -> **初始化** -> **使用** -> **销毁** 几个核心阶段。下图直观展示了 Bean 的完整生命周期流程：\n\n\u003Cimg src={lifecycle.src} alt=\"Feat Cloud 生命周期\" width=\"100%\" className=\"shadow\"/>\n\n\n#### 创建实例\nFeat Cloud 通过 **@Bean** 和 **@Controller** 注解来定义实例对象。\n##### 方式1\n在某个 class 上添加注解 `@Bean`。Feat Cloud 启动时会自动创建该 Bean，bean 的名称默认为类名首字母小写。\n```java {1}\n@Bean\npublic class BeanDemo{\n\n}\n```\n如果需要自定义 bean 的名称，可以通过 `value` 属性来指定。例如：@Bean(\"beanDemo2\")\n\n```java {1}\n@Bean(\"beanDemo2\")\npublic class BeanDemo{\n\n}\n```\n\n@Controller 是一种特殊的 Bean，它没有 bean 名称的概念。\n我们认为一个 Controller 的核心功能就是提供 HTTP 服务，而不是成一个可被外部依赖的 bean 对象。\n```java {1}\n@Controller\npublic class ControllerDemo{\n\n}\n```\n\n##### 方式2\n在 Bean/Controller 的中通过 `@Bean` 注解定义 Bean 方法。\n若未在 @Bean 中指定 bean 的名称，则默认为方法名。\n```java {3}\n@Bean\npublic class BeanDemo{\n    @Bean\n    public BeanDemo beanDemo2(){\n        return new BeanDemo();\n    }\n}\n```\n##### 方式3\n服务启动时通过`addExternalBean`方法添加外部 Bean。\n```java \"addExternalBean\"\npublic class FeatCloudDemo {\n\n    public static void main(String[] args) {\n        Feat.cloudServer(opts -> opts.addExternalBean(\"beanDemo\", new BeanDemo()))\n            .listen();\n    }\n}\n```\n**注意：@Autowired、@PostConstruct、@PreDestroy 等注解的相关特性不在此类 Bean 中生效。**\n\n#### @Autowired：属性填充\n\n该注解用于填充 Bean 或者 Controller 的属性，类似于 Spring 中的 `@Autowired`。\n\n**注意：因为技术方面的原因，现阶段需要显示提供属性的 setter 方法。**\n```java \"@Autowired\" \"setHello\"\n@Bean\npublic class FeatBeanDemo {\n    @Autowired\n    private String hello;\n\n    public static void main(String[] args) {\n        Feat.cloudServer(opts -> opts.addExternalBean(\"hello\", \"你好~\")).listen();\n    }\n\n    public void setHello(String hello) {\n        this.hello = hello;\n    }\n}\n```\n#### @PostConstruct：初始化\n\n同 Spring 中的 `@PostConstruct` 注解，在 Bean 完成实例化和属性填充后被调用。\n```java \"@PostConstruct\"\n@Bean\npublic class FeatBeanDemo {\n    @Autowired\n    private String hello;\n\n    @PostConstruct\n    public void init() {\n        System.out.println(hello);\n    }\n\n    public static void main(String[] args) {\n        Feat.cloudServer(opts -> opts.addExternalBean(\"hello\", \"你好~\")).listen();\n    }\n\n    public void setHello(String hello) {\n        this.hello = hello;\n    }\n}\n```\n#### 使用 Bean\n\n在 Feat Cloud 中，可以通过 `@Autowired` 注解来注入和使用其他 Bean。Bean 之间可以相互依赖，形成依赖关系图。\n\n```java \"@Autowired\" \"otherBean\"\n@Bean\npublic class BeanDemo {\n    @Autowired\n    private OtherBean otherBean;\n\n    public void useOtherBean() {\n        // 使用注入的 otherBean\n        otherBean.doSomething();\n    }\n\n    public void setOtherBean(OtherBean otherBean) {\n        this.otherBean = otherBean;\n    }\n}\n\n@Bean\npublic class OtherBean {\n    public void doSomething() {\n        System.out.println(\"OtherBean is doing something\");\n    }\n}\n```\n\n##### 循环依赖\n\nFeat Cloud 支持 Bean 之间的循环依赖。当两个或多个 Bean 相互依赖时，Feat Cloud 能够正确处理这种情况，确保所有 Bean 都能正确初始化。\n\n```java \"beanA\" \"beanB\"\n@Bean\npublic class BeanA {\n    @Autowired\n    private BeanB beanB;\n\n    public void setBeaB(BeanB beanB) {\n        this.beanB = beanB;\n    }\n}\n\n@Bean\npublic class BeanB {\n    @Autowired\n    private BeanA beanA;\n\n    public void setBeanA(BeanA beanA) {\n        this.beanA = beanA;\n    }\n}\n```\n\n##### Bean 的作用域\n\n目前 Feat Cloud 中的 Bean 默认都是单例的，即在整个应用中只有一个实例。这意味着无论在哪里注入这个 Bean，获取到的都是同一个实例。\n\n#### @PreDestroy：销毁\n\n@PreDestroy 作用于 Bean 或者 Controller 内部 public 方法上，类似于 Spring 中的 `@PreDestroy`。当应用关闭时，Feat Cloud 会调用标记了 @PreDestroy 注解的方法，以便 Bean 可以释放资源或执行其他清理操作。\n\n```java \"@PreDestroy\" \"destroy\"\n@Bean\npublic class ResourceBean {\n    private Resource resource;\n\n    @PostConstruct\n    public void init() {\n        // 初始化资源\n        resource = new Resource();\n        System.out.println(\"资源已初始化\");\n    }\n\n    @PreDestroy\n    public void destroy() {\n        // 释放资源\n        if (resource != null) {\n            resource.close();\n            System.out.println(\"资源已释放\");\n        }\n    }\n\n    // 资源类示例\n    private class Resource {\n        public void close() {\n            // 关闭资源的逻辑\n        }\n    }\n}\n```\n\n##### 销毁时机\n\n当以下情况发生时，@PreDestroy 注解的方法会被调用：\n\n1. 应用正常关闭时（如调用 `System.exit()`）\n2. 通过 JVM 的 shutdown hook 关闭应用时\n3. 在 Feat Cloud 中，当调用 `server.shutdown()` 方法时","src/content/docs/cloud/getstart.mdx","f796f4bf60fa9ac8","cloud/mcp",{"id":314,"data":316,"body":322,"filePath":323,"digest":324,"deferredRender":16},{"title":317,"description":318,"editUrl":16,"head":319,"template":18,"sidebar":320,"pagefind":16,"draft":20},"MCP 开发","Model Context Protocol集成开发",[],{"order":137,"hidden":20,"attrs":321},{},"import CheckAuthorize from '../../../components/CheckAuthorize.astro'\nimport { TabItem, Tabs } from \"@astrojs/starlight/components\";\n\n\u003CCheckAuthorize/>\n\nModel Context Protocol (MCP) 是一种开放协议，允许 AI 系统与应用程序安全地交换信息和工具。Feat Cloud 提供了完整的 MCP 支持，包括：\n\n- **工具 (Tools)**: 允许 AI 助手调用应用程序中的功能\n- **提示词 (Prompts)**: 提供预定义的提示词模板\n- **资源 (Resources)**: 共享文本或二进制资源\n\nFeat Cloud 提供两种 MCP 服务构建方式：\n\n1. **默认 MCP 服务器（零配置）**：框架自动创建 MCP 服务器实例\n2. **自定义 MCP 服务端点（可扩展）**：通过注解精细控制服务配置\n\n## 默认 MCP Server（推荐）\n只要`Controller`类中出现 任意 @Tool、@Prompt 或 @Resource 注解，Feat Cloud 就会在源码编译期时为你生成一个默认 MCP 服务器实例，无需额外配置。\n\n### 快速上手\n```java\n@Controller\npublic class DefaultMcpUsageController {\n    \n    @Autowired\n    private McpServer mcpServer;\n    \n    @PostConstruct\n    public void init() {\n        // 添加工具到默认MCP服务器\n        mcpServer.addTool(ServerTool.of(\"currentTime\")\n            .description(\"获取当前时间\")\n            .inputSchema(ServerTool.boolProperty(\"withMilliseconds\", \"是否包含毫秒\"))\n            .doAction(ctx -> {\n                boolean withMs = ctx.getArguments().getBooleanValue(\"withMilliseconds\");\n                if (withMs) {\n                    return ToolResult.ofText(String.valueOf(System.currentTimeMillis()));\n                } else {\n                    return ToolResult.ofText(String.valueOf(System.currentTimeMillis() / 1000));\n                }\n            }));\n            \n        // 添加提示词到默认MCP服务器\n        mcpServer.addPrompt(ServerPrompt.of(\"greeting\")\n            .description(\"问候语提示词\")\n            .arguments(tech.smartboot.feat.ai.mcp.model.Prompt.argument(\"name\", \"用户姓名\"))\n            .doAction(ctx -> {\n                String name = ctx.getArguments().getString(\"name\");\n                return PromptMessage.ofText(RoleEnum.Assistant, \"你好，\" + name + \"！有什么我可以帮助你的吗？\");\n            }));\n    }\n\n    @Tool(description = \"测试工具\")\n    public String tool1(@Param(required = true, description = \"参数1\") String param1,\n        @Param(required = false, description = \"参数2\") int param2,\n        boolean param3) {\n        return \"hello \" + param1;\n    }\n\n    @Tool(description = \"测试工具\")\n    public boolean tool2(@Param(required = true, description = \"参数1\") String param1,\n        @Param(required = false, description = \"参数2\") int param2,\n        boolean param3) {\n        return true;\n    }\n\n    @Tool(description = \"测试工具\")\n    public int tool3(@Param(required = true, description = \"参数1\") String param1,\n        @Param(required = false, description = \"参数2\") int param2,\n        boolean param3) {\n        return 0;\n    }\n\n    // 其他业务方法...\n}\n```\n\n## 自定义 MCP Server\n\n对于更复杂的 MCP 服务需求，您可以使用 `@McpEndpoint` 注解创建自定义 MCP 服务端点。\n相较于默认 MCP 服务，自定义 MCP 服务端仅仅是在 Controller 中额外多了一个 `@McpEndpoint` 注解。\n\n### 使用示例\n\n下面是一个完整的 MCP Controller 示例，展示了如何使用所有 MCP 注解：\n\n\u003CTabs>\n\u003CTabItem label=\"McpDemoController.java\">\n\n```java\n@Controller\n@McpEndpoint(\n    name = \"demo-mcp-service\",\n    title = \"Demo MCP Service\",\n    sseEndpoint = \"/mcp/sse\",\n    sseMessageEndpoint = \"/mcp/sse/message\",\n    streamableEndpoint = \"/mcp/stream\"\n)\npublic class McpDemoController {\n\n    /**\n     * 定义一个工具，用于获取用户信息\n     */\n    @Tool(name = \"getUserInfo\", description = \"根据用户ID获取用户信息\")\n    public UserInfo getUserInfo(\n        @Param(required = true, description = \"用户ID\") Long userId,\n        @Param(required = false, description = \"是否包含详细信息\") Boolean detailed\n    ) {\n        // 实现获取用户信息的逻辑\n        UserInfo user = new UserInfo();\n        user.setId(userId);\n        user.setName(\"User \" + userId);\n        user.setEmail(userId + \"@example.com\");\n\n        if (Boolean.TRUE.equals(detailed)) {\n            user.setPhone(\"13800138000\");\n            user.setAddress(\"北京市朝阳区\");\n        }\n\n        return user;\n    }\n\n    /**\n     * 定义一个工具，用于计算两个数的和\n     */\n    @Tool(name = \"addNumbers\", description = \"计算两个数的和\")\n    public double addNumbers(\n        @Param(required = true, description = \"第一个数\") double a,\n        @Param(required = true, description = \"第二个数\") double b\n    ) {\n        return a + b;\n    }\n\n    /**\n     * 定义一个文本提示词\n     */\n    @Prompt(\n        name = \"codeReviewPrompt\",\n        description = \"代码审查提示词\",\n        type = PromptType.TEXT\n    )\n    public String codeReviewPrompt(\n        @Param(required = true, description = \"编程语言\") String language,\n        @Param(required = true, description = \"代码片段\") String codeSnippet\n    ) {\n        return String.format(\"请审查以下%s代码并提供改进建议：%s\", language, codeSnippet);\n    }\n\n    /**\n     * 定义一个文本资源\n     */\n    @Resource(\n        uri = \"/resources/coding-standards.md\",\n        name = \"编码规范\",\n        description = \"团队编码规范文档\",\n        mimeType = \"text/markdown\",\n        isText = true\n    )\n    public String codingStandards() {\n        return \"\"\"\n            # 编码规范\n\n            ## 命名规范\n            1. 类名使用大驼峰命名法\n            2. 方法名使用小驼峰命名法\n            3. 常量名使用全大写加下划线\n\n            ## 代码格式\n            1. 缩进使用4个空格\n            2. 行宽不超过120个字符\n            3. 方法之间空一行\n            \"\"\";\n    }\n\n    /**\n     * 定义一个二进制资源\n     */\n    @Resource(\n        uri = \"/resources/architecture.png\",\n        name = \"架构图\",\n        description = \"系统架构图\",\n        mimeType = \"image/png\",\n        isText = false\n    )\n    public String architectureDiagram() {\n        // 返回图片的Base64编码\n        return \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==\";\n    }\n\n    // 返回文本内容\n    @Tool(description = \"获取文本信息\")\n    public ToolResult.TextContent getTextInfo() {\n        return ToolResult.ofText(\"这是文本内容\");\n    }\n\n    // 返回图片内容\n    @Tool(description = \"获取图片信息\")\n    public ToolResult.ImageContent getImageInfo() {\n        return ToolResult.ofImage(\"base64-encoded-image-data\", \"image/png\");\n    }\n}\n```\n\n\u003C/TabItem>\n\n\u003CTabItem label=\"UserInfo.java\">\n\n```java\npublic class UserInfo {\n    private Long id;\n    private String name;\n    private String email;\n    private String phone;\n    private String address;\n    \n    // Getters and setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    \n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    \n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    \n    public String getPhone() { return phone; }\n    public void setPhone(String phone) { this.phone = phone; }\n    \n    public String getAddress() { return address; }\n    public void setAddress(String address) { this.address = address; }\n}\n```\n\n\u003C/TabItem>\n\u003C/Tabs>\n\n\n## 注解详解\n\n### @McpEndpoint\n`@McpEndpoint` 注解用于标记一个 Controller 类作为 MCP 服务端点。它定义了 MCP 服务的基本配置，包括服务信息和各种 MCP 操作的端点地址。\n| 参数 | 类型 | 默认值 | 说明 |\n|------|------|--------|------|\n| `name` | String | `\"feat-mcp-server\"` | MCP 服务名称，对应 MCP 协议中服务的 name 字段 |\n| `title` | String | `\"Feat MCP Server\"` | MCP 服务标题，对应 MCP 协议中服务的 title 字段 |\n| `version` | String | `Feat.VERSION` | MCP 服务版本，对应 MCP 协议中服务的 version 字段 |\n| `sseEndpoint` | String | 必填 | SSE 端点地址，用于建立 SSE 连接的端点 URL 路径 |\n| `sseMessageEndpoint` | String | 必填 | SSE 消息端点地址，用于发送 SSE 消息的端点 URL 路径 |\n| `streamableEndpoint` | String | 必填 | 流式传输端点地址，用于支持流式数据传输的端点 URL 路径 |\n| `resourceEnable` | boolean | `true` | 资源功能开关，控制是否启用 MCP 资源 (resources/list) 功能 |\n| `toolEnable` | boolean | `true` | 工具功能开关，控制是否启用 MCP 工具 (tools/list, tools/call) 功能 |\n| `promptsEnable` | boolean | `true` | 提示词功能开关，控制是否启用 MCP 提示词 (prompts/list) 功能 |\n| `loggingEnable` | boolean | `true` | 日志功能开关，控制是否启用 MCP 日志 (logging) 功能 |\n\n### @Tool\n`@Tool` 注解用于标记一个方法作为 MCP 工具。工具具有可执行性，可以与外部系统进行交互，是 MCP 协议的重要组成部分。\n\n| 参数 | 类型 | 默认值 | 说明 |\n|------|------|--------|------|\n| `name` | String | 方法名 | 工具名称，在 MCP 协议中用于唯一标识一个工具，客户端通过该名称调用工具 |\n| `description` | String | `\"\"` | 工具描述信息，用于向客户端说明工具的功能和使用方法 |\n\nMCP 工具支持多种返回类型：\n\n1. **基本类型**: `String`, `int`, `long`, `float`, `double`, `boolean`, `byte`\n2. **复合类型**: 自定义对象（会自动序列化为 JSON）\n3. **专用类型**: `ToolResult.TextContent`, `ToolResult.ImageContent`\n\n#### 示例\n\n```java\n// 返回文本内容\n@Tool(description = \"获取文本信息\")\npublic ToolResult.TextContent getTextInfo() {\n    return ToolResult.ofText(\"这是文本内容\");\n}\n\n// 返回图片内容\n@Tool(description = \"获取图片信息\")\npublic ToolResult.ImageContent getImageInfo() {\n    return ToolResult.ofImage(\"base64-encoded-image-data\", \"image/png\");\n}\n```\n\n### @Param\n`@Param` 注解用于定义 MCP 工具的参数信息。\n\n| 参数 | 类型 | 默认值 | 说明 |\n|------|------|--------|------|\n| `required` | boolean | 必填 | 参数是否必需，对应 JSON Schema 中的 required 字段 |\n| `description` | String | `\"\"` | 参数描述信息，对应 JSON Schema 中的 description 字段 |\n\n### @Prompt\n`@Prompt` 注解用于定义 MCP 提示词资源。\n\n| 参数 | 类型 | 默认值 | 说明 |\n|------|------|--------|------|\n| `name` | String | 必填 | 提示词名称，必须唯一，对应 MCP 协议中提示词的 name 字段 |\n| `description` | String | `\"\"` | 提示词描述信息，对应 MCP 协议中提示词的 description 字段 |\n| `type` | PromptType | 必填 | 提示词类型，对应 MCP 协议中提示词的 type 字段 |\n| `role` | RoleEnum | `RoleEnum.User` | 提示词角色，对应 MCP 协议中提示词的 role 字段 |\n| `mineType` | String | `\"\"` | 提示词内容的 MIME 类型，对应 MCP 协议中提示词的 mimeType 字段 |\n\nMCP 支持多种提示词类型：\n\n1. **TEXT**: 纯文本提示词\n2. **IMAGE**: 图片提示词\n3. **AUDIO**: 音频提示词\n4. **EMBEDDED_RESOURCE**: 嵌入式资源提示词\n\n#### 示例\n\n```java\n// 文本提示词\n@Prompt(name = \"textPrompt\", type = PromptType.TEXT)\npublic String textPrompt() {\n    return \"这是一个文本提示词\";\n}\n\n// 图片提示词\n@Prompt(name = \"imagePrompt\", type = PromptType.IMAGE, mineType = \"image/png\")\npublic String imagePrompt() {\n    return Base64.getEncoder().encodeToString(loadImageBytes());\n}\n\n// 嵌入式资源提示词\n@Prompt(name = \"resourcePrompt\", type = PromptType.EMBEDDED_RESOURCE)\npublic PromptMessage resourcePrompt() {\n    return PromptMessage.ofEmbeddedResource(\n        RoleEnum.User,\n        Resource.of(\"file:///config.json\", \"配置文件\", \"application/json\")\n    );\n}\n```\n\n### @Resource\n`@Resource` 注解用于定义 MCP 资源，对应 MCP 协议中 resources/list 操作的资源定义。\n\n| 参数 | 类型 | 默认值 | 说明 |\n|------|------|--------|------|\n| `uri` | String | 必填 | 资源 URI，在 MCP 协议中用于唯一标识和访问一个资源 |\n| `name` | String | 必填 | 资源名称，对应 MCP 协议中资源的 name 字段 |\n| `description` | String | `\"\"` | 资源描述信息，对应 MCP 协议中资源的 description 字段 |\n| `isText` | boolean | `true` | 资源类型标识，true 表示文本资源，false 表示二进制资源 |\n| `mimeType` | String | `\"\"` | 资源内容的 MIME 类型，对应 MCP 协议中资源的 mimeType 字段 |\n\n\n## 小结\n\n通过 Feat Cloud 提供的 MCP 支持，您可以轻松地为 AI 助手提供上下文信息和工具能力。默认 MCP 服务器适合快速上手，而自定义 MCP 服务端点则提供了更精细的控制能力。根据您的具体需求选择合适的方案即可。","src/content/docs/cloud/mcp.mdx","0fd2d601014bbc54"]